'use strict';

const _ = require('lodash');
const jsyaml = require('./jsyaml');

const Type = module.exports = class Type {

  constructor (Pattern) {
    var self = this,
      item = new Pattern(),
      opts = _.extend({}, item.options, item.getOptions ? item.getOptions() : {}),
      tag = c(item, 'getTag', opts.tag, item.tag),
      resolve = c(item, 'getResolve', opts.resolve, item.resolve),
      construct = c(item, 'getConstruct', opts.construct, item.construct),
      represent = c(item, 'getRepresent', opts.represent, item.represent);
    return new jsyaml.Type(tag, {
      kind: c(item, 'getKind', opts.kind, item.kind),
      instanceOf: c(item, 'getInstanceOf', opts.instanceOf, item.instanceOf),

      resolve: resolve ? resolve.bind(item) : null,
      construct: construct ? construct.bind(item) : null,
      represent: represent ? represent.bind(item) : null,
    });
  }

}

function c(item, name, ...values) {
  var value = null;
  if (typeof item[name] === 'function') {
    value = item[name]();
  }
  values.forEach(val => {
    if (value !== null && value !== undefined) return;
    value = val;
  });
  return value;
}
