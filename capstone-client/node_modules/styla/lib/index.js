'use strict';

const _ = require('lodash');
const stylus = require('stylus');
const path = require('path');
const fs = require('fs');
const palette = require('../palette/index.js');

const paths = {
  styles: path.resolve(__dirname, '../styles/index.styl'),
};

module.exports = global.s = {

  palette: palette,

  renderFile (file, opts = {}) {
    var self = this,
      st = self.compileFile(file, opts);
    return st.render();
  },

  compileFile (file, opts = {}) {
    var self = this,
      filename = fs.realpathSync(file),
      source = fs.readFileSync(filename, 'utf-8'),
      st = stylus(source)
        .set('filename', filename)
        .import(paths.styles);
    opts.compress ? st.set('compress', true) : '';
    _.each(opts.set, (val, name) => st.import(name, val));
    _.each(opts.define, (val, name) => st.define(name, val));
    _.each(opts.include, filename => st.include(filename));
    _.each(opts.imports, filename => st.import(filename));
    return st;
  },

  render (source, opts = {}) {
    var self = this,
      st = stylus(source)
        .import(paths.styles);
      if (opts.filename)
        st.set('filename', opts.filename);
      opts.compress ? st.set('compress', true) : '';
      _.each(opts.set, (val, name) => st.import(name, val));
      _.each(opts.define, (val, name) => st.define(name, val));
      _.each(opts.include, filename => st.include(filename));
      _.each(opts.imports, filename => st.import(filename));
      return st.render();
  },

};
