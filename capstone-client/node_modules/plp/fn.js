'use strict';

const _ = {
  keys: require('./keys'),
  extend: require('./extend'),
  getFunctionArgs: require('./get-function-args'),
  getFunctionBody: require('./get-function-body'),
  _: require('./_'),
  uniqueId: require('./unique-id'),
  defaults: require('./defaults'),
  each: require('./each'),
};

const state = {
  vars: {},
};

class EditableFunction {

  constructor (name, args, body) {
    var self = this;
    self.fn = fn;
    self.name = name || '';
    self.args = args || [];
    self.body = body || '';
    self.globals = {};
    self.vars = [];
  }

  parse (fn) {
    var self = this;
    self.name = fn.name;
    self.args = _.getFunctionArgs(fn);
    self.body = _.getFunctionBody(fn);
    return self;
  }

  getCoreFn () {
    var self = this,
      core = new Function(...self.args, self.body);
    return core;
  }

  createWrapper (globals = {}) {
    var self = this,
      globalVars = _
        .keys(globals)
        .map(key => `var ${key} = $__globals['${key}'];`)
        .join('\n'),
      factory = eval(`
        function wrapper($__globals, $__fetchVar) {
          ${globalVars}
          const fn = function ${self.name}(${self.args.join(', ')}) {
            ${self.getVarsCode()}
            ${self.getBodySource()}
          };
          return fn;
        }
        wrapper
      `);
    wrapper.$__globals = globals;
    return wrapper;
    function wrapper(context = {}) {
      return factory(globals, uid => state.vars[uid]);
    }
  }

  getBodySource () {
    var self = this;
    return self.body;
  }

  createFunction (globals = {}, context = {}) {
    var self = this,
      wrapper = self.createWrapper(globals),
      fn = self.fn = wrapper(context);
    return fn;
  }

  prependArgs (args) {
    var self = this;
    self.args.splice(0, 0, ...args);
    return self;
  }

  appendArgs (args) {
    var sef = this;
    self.args.splice(self.args.length - 1, 0, ...args);
    return self;
  }

  getVarsCode () {
    var self = this;
    return self.vars
      .map(item => {
        var name = item[0],
          val = item[1];
        if (!item[2]) {
          val = `$__fetchVar('${val}')`;
        }
        return `var ${name} = ${val};`;
      })
      .join('\n');
  }

  insertVar (name, val, isString) {
    var self = this,
      uid = _.uniqueId('fn-var-');
    if (isString) {
      self.vars.push([name, val, true]);
      return self;
    }
    state.vars[uid] = val;
    self.vars.push([name, uid, false]);
    return self;
  }

}

function fn(...args) {
  if (args.length === 1 && typeof args[0] === 'function') {
    let item = new EditableFunction();
    item.parse(args[0]);
    return item;
  }
  return new EditableFunction(...args);
}

function modifyFunction(fn, o = {}) {
  var opts = _.defaults(o, {
      args: undefined,
      name: undefined,
      body: undefined,
      prependArgs: undefined,
      appendArgs: undefined,
      vars: [],
      context: {},
      globals: {},
    }),
    item = parseFunction(fn);
  item.args = opts.args || item.args;
  item.name = opts.name || item.name;
  item.body = opts.body || item.body;
  opts.prependArgs ? item.prependArgs(opts.prependArgs) : '';
  opts.appendArgs ? item.appendArgs(opts.appendArgs) : '';
  _.each(opts.vars, (data) => {
    item.insertVar(data[0], data[1], data[2]);
  });
  fn = item.createFunction(opts.globals, opts.context);
  fn._editableFunction = item;
  return fn;
}

function createFunction(name = '', args = [], body = '', globals = {}, context = {}) {
  var item = new EditableFunction(name, args, body);
  return item.createFunction(globals, context);
}

function parseFunction(fn) {
  var item = new EditableFunction();
  return item.parse(fn);
}

_.extend(fn, {
  args: _.getFunctionArgs,
  body: _.getFunctionBody,
  create: createFunction,
  parse: parseFunction,
  modify: modifyFunction,
});

module.exports = fn;
