'use strict';

const _ = require('lodash');
const fs = require('fs');
const path = require('path');
const util = require('util');
const webpack = require('webpack');
const colorsSupported = require('supports-color');
const gutil = require('gutil');

module.exports = {

  buildDist () {
    var dir = path.resolve(__dirname, '..'),
      index = require(path.resolve(dir, 'index.json')),
      outDir = path.resolve(dir, 'dist'),
      entry = getCollectionEntry(dir),
      config = _.extend({}, require('../webpack.config.js'), {
        // entry: entry,
      });

    webpack(config, (err, stats) => {
      if (err) { return handleError(err); }
      showStats(stats);
    });
  },

  buildCollections () {
    var dir = path.resolve(__dirname, '..'),
      index = require(path.resolve(dir, 'index.json'));
    fs
      .readdirSync(dir)
      .map(file => path.resolve(dir, file))
      .filter(filename => fs.existsSync(filename) && fs.statSync(filename).isFile())
      .forEach(filename => {
        var source = fs.readFileSync(filename, 'utf-8');
        if (source.indexOf('<PLP COLLECTION>') > -1)
          fs.unlinkSync(filename);
      });
    _.each(index, (files, name) => {
      var code =
`'use strict';
// <PLP COLLECTION>

module.exports = {
  ${files.map(file => `${_.camelCase(file.replace(/\_/mgi, 'XKLXKL')).replace(/XKLXKL/mgi, '_')}: require('${file}'),`).join('\n  ')}
};
`;
      fs.writeFileSync(path.resolve(dir, `_${name}.js`), code);
    });
  },

};

function getCollectionEntry (dir) {
  var entry = {};
  fs
    .readdirSync(dir)
    .filter(file => file[0] === '_' && file[1] !== '_')
    .map(file => path.resolve(dir, file))
    .filter(filename => fs.existsSync(filename) && fs.statSync(filename).isFile())
    .forEach(filename => {
      var name = path.basename(filename, path.extname(filename)).slice(1);
      entry[name] = [path.relative(dir, filename)];
    });
  return entry;
}

function showStats(stats) {
  gutil.log('[webpack]', stats.toString({
    colors: colorsSupported,
    chunks: false,
    errorDetails: true
  }));
}

function handleError(err) {
  console.error(gutil.PluginError('webpack', err).stack);
}
