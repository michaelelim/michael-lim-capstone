'use strict';

const _ = require('../_');
const fs = require('fs');
const path = require('path');
const wrench = require('wrench');

const File = require('./file');

class Project extends _.EventEmitter {

  constructor (dir, opts = {}) { super();
    var self = this;

    self.opts = _.extend({
      exclude: [
        'node_modules/',
      ],
      output: 'JSDOC.md',
    }, opts);
    self.dir = dir;
    self.files = [];

    self.loadFiles();
  }

  build () {
    var self = this,
      code = self.render(),
      filename = self.resolve(self.opts.output);
    fs.writeFileSync(filename, code);
    return self;
  }

  render () {
    var self = this,
      entries = self.entries;
    return `
# ${path.basename(self.dir)}

${entries.map(entry => entry.render()).join('\n\n')}
    `;
  }

  get entries () {
    var self = this;
    return self.getEntries();
  }

  getEntries () {
    var self = this,
      items = [];
    _.each(self.files, file => {
      items = items.concat(file.entries);
    });
    return items;
  }

  loadFiles () {
    var self = this,
      files = wrench
        .readdirSyncRecursive(self.dir)
        .filter(file => !self.isExcluded(file))
        .filter(file => fs.statSync(self.resolve(file)).isFile());
    files.forEach(file => {
      self.files.push(new File(file, self));
    });
    return self;
  }

  isExcluded (file) {
    var self = this,
      exclude = false;
    _.each(self.opts.exclude, ex => {
      if (!file.includes(ex)) return;
      exclude = true;
    });
    return exclude;
  }

  resolve (...args) {
    var self = this;
    return path.resolve(self.dir, ...args);
  }

}

module.exports = Project;
