'use strict';

var path = require('path');
var fs = require('fs');

const _ = require('../rextend')({}, [
  'extend', 'list', 'path', 'camelcase',
  'test-search',
]);

const DIR = path.resolve(__dirname, '..');

function plp () {
  var items = plp.modules(),
    data = {};
  items.forEach(item => {
    data[item.moduleName] = null;
    // try {
    //   data[item.moduleName] = require(item.filename);
    // } catch(err) {
    //   data[item.moduleName] = null;
    // }
  });
  return data;
};

_.extend(plp, {

  modules (cb) {
    return _
      .list(fs.readdirSync(DIR))
      .map(file => {
        var ext = path.extname(file),
          filename = path.resolve(DIR, file),
          name = path.basename(file, ext),
          stat = fs.statSync(filename),
          types = [
            stat.isFile(),
            stat.isDirectory(),
            stat.isSocket(),
            stat.isSymbolicLink(),
          ],
          type = ['file', 'dir', 'socket', 'link'][types.indexOf(true)],
          main = type === 'dir' ? path.resolve(filename, 'index.js') : filename,
          args = readargs(main),
          env = args[0] || 'common';
        return {
          moduleName: _.camelcase(name),
          main,
          exists: fs.existsSync(main),
          file, filename, name, ext,
          isFile: types[0],
          isDirectory: types[1],
          isSocket: types[2],
          isLink: types[3],
          args, type,
          meta: {
            env,
          },
        };
      })
      .filter(item => {
        var results = cb(item);
        return !results.filter(v => !!v).length;
      })
      .map(item => {
        item.module = require(item.main);
      })
      .get();
  },

});

module.exports = plp;

function readargs(path, i = 0) {
  if (!fs.existsSync(path) || !fs.statSync(path).isFile()) return [];
  var line = fs.readFileSync(path, 'utf-8').split('\n')[i];
  if (!line.includes('///')) return [];
  return line.split('///')[1].split('|');
  // return new Promise(function (resolve, reject) {
  //   var rs = fs.createReadStream(path, {encoding: 'utf8'});
  //   var acc = '';
  //   var pos = 0;
  //   var index;
  //   rs
  //     .on('data', function (chunk) {
  //       index = chunk.indexOf('\n');
  //       acc += chunk;
  //       if (index === -1) {
  //         pos += chunk.length;
  //       } else {
  //         pos += index;
  //         rs.close();
  //       }
  //     })
  //     .on('close', function () {
  //       resolve(acc.slice(0, pos));
  //     })
  //     .on('error', function (err) {
  //       reject(err);
  //     })
  // });
}
