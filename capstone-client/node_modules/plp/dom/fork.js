import EventsWrapper from './events';
import _ from './_';
import getElementContainer from 'plp/get-element-container';

class ForkWrapper extends EventsWrapper {

  create (tagName) {
    if (!this.elem) return this;
    var self = this,
      elem = self.elem,
      child = document.createElement(tagName || 'div');
    elem.appendChild(child);
    return _.wrap(child);
  }

  up () {
    var self = this,
      elem = self.elem;
    if (!elem) return self;
    return _.wrap(elem.parentElement);
  }

  one (sel = '*') {
    var self = this,
      items = [],
      elems = self.elems,
      elem = elems[0];
    if (!elem) {
      return self.childrenFork(sel);
    }
    return _.wrap(getElementContainer(elem).querySelector(sel), self._parent);
  }

  many (sel = '*') {
    var self = this,
      items = [];
    self.elems.forEach(elem => {
      var elems = getElementContainer(elem).querySelectorAll(sel);
      items = items.concat(Array.from(elems));
    });
    return _.wrap(items, self._parent);
  }

  parents (sel = '*') {
    var self = this,
      elem = self.elem,
      elems = _.parentNodes(elem);
    return elems
      .map(elem => _.wrap(elem, self._parent))
      .filter(item => item.matches(sel));
  }

  parent (sel = '*') {
    var self = this,
      items = self.parents(sel);
    return items[0];
  }

  first () {
    var self = this;
    return self.fork({
      index: 0,
    });
  }

  last () {
    var self = this;
    return self.fork({
      index: self.length - 1,
    });
  }

  at (index) {
    var self = this;
    return self.fork({ index: +index });
  }

  nth (...args) {
    var self = this;
    return self.at(...args);
  }

  filter (sel) {
    var self = this;
    return self.fork({
      is: [sel],
    });
  }

  childrenFork (s) {
    var self = this,
      item = _.wrap(s, self.elem);
    return item;
  }

  fork (opts = {}) {
    var self = this;
    return _.wrap({
      sel: [].concat(self.opts.sel).concat(opts.sel),
      not: [].concat(self.opts.not).concat(opts.not),
      is: [].concat(self.opts.is).concat(opts.is),
      index: self.opts.index || opts.index || null,
    }, self._parent);
  }

}

export default ForkWrapper;
