import AttrsWrapper from './attrs';
import _ from './_';

class EventsWrapper extends AttrsWrapper {

  on (name, selector, cb) {
    var self = this,
      args = arguments;
    if (args.length >= 1 && args.length < 3 && name && typeof name === 'object') {
      _.each(name, (sel, match) => {
        if (typeof match === 'function')
          return self.listen(sel, match);
        return _.each(sel, (cb, name) => {
          return self.delegate(name, match, cb);
        });
      });
      return self;
    }
    if (arguments.length === 2) {
      return self.listen(name, selector);
    }
    if (arguments.length === 3) {
      return self.delegate(name, selector, cb);
    }
  }

  listen (name, cb) {
    var self = this;
    self.each(elem => elem.addEventListener(name, ev => {
      cb.call(self, ev, self);
    }, false));
    return self;
  }

  delegate (name, match, cb) {
    var self = this;
    self.each(elem => {
      elem.addEventListener(name, ev => {
        var target = ev.target,
          elem = _
            .parentNodes(target, true)
            .filter(el => el.matches(match))[0];
        if (!elem) return;
        cb.call(self, ev, _.wrap(elem, self._parent));
      }, false);
    });
    return self;
  }

}

export default EventsWrapper;
