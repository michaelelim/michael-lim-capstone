import ForkWrapper from './fork';
import _ from './_';
import getElementContainer from 'plp/get-element-container';

class QueryWrapper extends ForkWrapper {

  get length () {
    var self = this;
    return self.elems.length || 0;
  }

  get elems () {
    var self = this;
    return self._elems ? self._elems : self._find();
  }

  get elem () {
    var self = this;
    return self.elems[0];
  }

  each (cb) {
    var self = this;
    return self.elems.forEach(cb);
  }

  matches (sel) {
    var self = this;
    return !!self.elems.filter(elem => elem.matches(sel)).length;
  }

  _find (o = {}) {
    var self = this,
      parent = self._parent,
      opts = _.extend({}, self.opts, o),
      elems = [];

    // Find Elems
    opts.sel.forEach(sel => {
      var items = Array.from(getElementContainer(parent).querySelectorAll(sel));
      elems = elems.concat(items);
    });

    // Not
    opts.not.forEach(n => {
      elems = elems.filter(elem => !elem.matches(n));
    });

    // IS
    opts.is.forEach(i => {
      elems = elems.filter(elem => elem.matches(i));
    });

    // Index
    if (typeof opts.index === 'number') {
      elems = [elems[opts.index]];
    }

    return elems;
  }

}

export default QueryWrapper;
