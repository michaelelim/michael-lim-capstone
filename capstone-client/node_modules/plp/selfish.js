'use strict';

const _ = {
  each: require('./each'),
  extend: require('./extend'),
  getFunctionArgs: require('./get-function-args'),
  isClass: require('./is-class'),
  classMeta: require('./class-meta'),
};

function selfish (fn) {
  if (!arguments.length) {
    class Selfish {
      constructor () {
        selfish(this.constructor);
      }
    };
    return Selfish;
  }
  if (_.isClass(fn)) {
    let Class = fn,
      methods = _.classMeta.methods(Class);
    _.extend(Class.prototype, selfish(methods));
    return Class;
  }
  if (typeof fn === 'object') {
    let data = fn;
    _.each(data, (value, name) => {
      if (typeof value !== 'function') return;
      data[name] = selfish(value);
    });
    return data;
  }
  var argsNames = _.getFunctionArgs(fn),
    fixed = function (...newArgs) {
      var self = this,
        args = new Array(argsNames.length);
      // console.log(1, fn, args);
      args = argsNames.map((argName, i) => {
        if (argName === 'self') return self;
        else return newArgs.shift();
      });
      // console.log(2, fn, args);
      return fn.call(self, ...args);
    };
  fixed._original = fn;
  fixed._args = argsNames;
  return fixed;
}

module.exports = selfish;
