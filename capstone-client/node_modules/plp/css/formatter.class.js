'use strict';

const _ = {
  camelCase: require('../camelcase'),
  type: require('../type'),
};

const state = {

};

class Formatter {

  constructor (opts) {
    var self = this;
    Object.assign(self, {
      names: null,
      types: opts.types || null,
      _format: opts.format || self._format,
      _test: opts.test || self._test,
    });
    self.setNames(opts.names);
  }

  setNames (names) {
    var self = this;
    if (!names) {
      self.names = null;
      return self;
    }
    if (typeof names === 'string') {
      names = [names];
    }
    self.names = names.map(name => _.camelCase(name));
    return self;
  }

  _format () {
    var self = this;
    return null;
  }

  _test () {
    var self = this;
    return true;
  }

  test (n, value) {
    var self = this,
      name = _.camelCase(n),
      match = true;
    if (self.names && !self.names.includes(name)) match = false;
    if (self.types && !self.types.includes(_.type(value))) match = false;
    if (!self._test(name, value)) match = false;
    return match;
  }

  format (name, value, result) {
    var self = this,
      result;
    if (!self.test(name, value)) return { [name]: value };
    result = self._format(name, value, result);
    if (!result) return { [name]: value };
    if (_.type(result) !== 'object')
      return {
        [name]: result,
      };
    return result;
  }

}

module.exports = Formatter;
