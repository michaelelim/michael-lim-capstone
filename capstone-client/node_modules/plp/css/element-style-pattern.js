import req from 'plp/req';

const _ = req.hash({
  trim: require('../trim'),
  get: require('../get'),
  each: require('../each'),
  extend: require('../extend'),
  dasherize: require('../dasherize'),
  camelCase: require('../camelcase'),
  ensureArray: require('../ensure-array'),
  extendUndefined: require('../extend-undefined'),
  util: require('./util'),
});

class Pattern {

  static patterns = [];
  static defaultPattern = null;

  static hasProperty (name) {
    var self = this,
      item = new self();
    return item.props.includes(name);
  }

  static get default () {
    var self = Pattern,
      pattern = self.defaultPattern || new Pattern();
    self.defaultPattern = pattern;
    return pattern;
  }

  static register (Class) {
    var self = Pattern;
    self.patterns.push(Class);
    return Class;
  }

  static getPattern (n, context = null) {
    var self = Pattern,
      name = _.camelCase(n),
      patterns = self.patterns,
      PatternClass = Pattern;
    _.each(patterns, (Class) => {
      if (!Class.hasProperty(name)) return;
      PatternClass = Class;
    });
    return new PatternClass(context);
  }

  props = [];

  constructor (style) {
    var self = this;
    self.style = style;
  }

  dump (val) {
    return `${val}`;
  }

  parse (val) {
    return val;
  }

  fromObject (val) {
    return val;
  }

  toObject (val) {
    return val;
  }

}

const pattern = Pattern.register.bind(Pattern);

@pattern
class BoxPattern extends Pattern {
  props = [
    'width', 'height',
    'top', 'left', 'right', 'bottom',
    'padding',
      'paddingTop',
      'paddingRight',
      'paddingBottom',
      'paddingLeft',
    'margin',
      'marginTop',
      'marginRight',
      'marginBottom',
      'marginLeft',
    'borderRadius',
      'borderTopLeftRadius',
      'borderTopRightRadius',
      'borderBottomRightRadius',
      'borderBottomLeftRadius',
    'borderWidth',
  ];

  dump (val) {
    return `${val}px`;
  }

  parse (val) {
    return +_.trim(val, 'px');
  }

  toObject (vals) {
    var self = this;
    return _.util.sidesArrayToObject(vals);
  }

  fromObject (d = {}, name) {
    var self = this,
      vals = _.util.sidesObjectToArray(d, {
        top: self.style.get(`${name}Top`),
        right: self.style.get(`${name}Right`),
        bottom: self.style.get(`${name}Bottom`),
        left: self.style.get(`${name}Left`),
      });
    return vals;
  }
}

@pattern
class BorderPattern extends Pattern {
  props = [
    'border',
      'borderTop',
      'borderRight',
      'borderBottom',
      'borderLeft',
    'outline',
  ];

  dump (d, name) {
    var self = this;
    _.extendUndefined(d, {
      width: self.style.get(`${name}Width`),
      style: self.style.get(`${name}Style`),
      color: self.style.get(`${name}Color`),
    });
    return `${d.width}px ${d.style} ${d.color}`;
  }

  parse (val) {
    var self = this,
      p = val.split(' ');
    return {
      width: self.style.parse('width', p[0])[0],
      style: p[1],
      color: p.slice(2).join(' '),
    };
  }

  toObject (vals) {
    return vals;
  }

  fromObject (vals) {
    return vals;
  }
}

@pattern
class BorderStylePattern extends Pattern {
  props = [
    'borderStyle',
  ];
}

@pattern
class BorderWidthPattern extends Pattern {
  props = [
    'borderWidth',
  ];
}

@pattern
class ColorPattern extends Pattern {
  props = [
    'color',
    'fill',
    'borderColor',
    'outlineColor',
  ];
}

export default Pattern;
