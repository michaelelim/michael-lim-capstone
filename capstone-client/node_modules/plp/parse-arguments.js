'use strict';

const _ = {
  _: require('./_'),
  each: require('./each'),
  extend: require('./extend'),
  type: require('./type'),
  defaults: require('./defaults'),
  spliceFirst: require('./splice-first'),
  trim: require('./trim'),
  flatten: require('./flatten'),
  repeat: require('./repeat'),
  is: require('./is'),
  concatArrays: require('./concat-arrays'),
};

function parseArguments(a, ...opts) {
  var data = {},
    args = [].slice.call(a, 0),
    items = _.concatArrays(opts).map(parseOpt),
    excludedItems = [];
  _.repeat(items.length - args.length, () => {
    excludedItems.push(removeItem());
  });
  _.each(items, (item, i) => {
    data[item.name] = args[i];
  });
  _.each(excludedItems, item => {
    data[item.name] = item.default;
  });
  return data;

  function parseOpt(opt) {
    var item = {
      name: '',
      type: 'any',
      isOptional: true,
      testType: testItemType,
    };
    if (_.is.string(opt))
      _.extend(item, {
        name: opt.split(':')[0],
        type: _.trim.right(opt.split(':')[1], '?'),
        isOptional: opt.endsWith('?'),
        default: undefined,
      });
    else if (_.is.array(opt))
      _.extend(item, {
        name: opt[0],
        type: parseType(opt[1]),
        isOptional: opt[1].endsWith('?'),
        default: opt[2],
      });
    else if (_.is.object(opt))
      _.extend(item, {
        name: opt.name || '',
        type: _.trim.right(opt.type || '', '?'),
        isOptional: (opt.type || '').endsWith('?'),
        default: opt.defaultValue || opt.default || opt.value || opt.val,
      });
    return item;
  }

  function parseType(t) {
    if (_.is.string(t))
      return _.trim.right(t, '?');
    return t;
  }

  function testItemType(val) {
    var self = this;
    return self.type === 'any' || _.type(val) === self.type;
  }

  function removeItem() {
    var result = null;
    _.each(items, (item, i) => {
      var arg = args[i],
        matches = !result && item.isOptional && !item.testType(arg);
      if (!matches) return;
      result = items.splice(items.indexOf(item), 1)[0];
    });
    return result;
  }
}

module.exports = parseArguments;
