'use strict';

const _ = {
  each: require('./each'),
  extend: require('./extend'),
  EventEmitter: require('./event-emitter'),
  aliases: require('./aliases'),
  defaults: require('./defaults'),
  pargs: require('./parse-arguments'),
  is: require('./is'),
  type: require('./type'),
  regFromString: require('./reg-from-string'),
};

class Re extends _.EventEmitter {

  constructor () { super();
    var self = this,
      args = _.pargs(arguments, [
        ['reg', 'reg?'],
        ['opts', 'object?', {}]
      ]),
      opts = _.defaults(args.opts, {
        groupsNames: null,
      });
    self.reg = args.reg || opts.reg || null;
    self.opts = opts;
  }

  test (str = '') {
    var self = this;
    return str.search(self.reg) > -1;
  }

  find (s = '', replace = null) {
    var self = this,
      results = [],
      str = s;
    str = str.replace(self.reg, (found, ...args) => {
      var all = args.pop(),
        index = args.pop(),
        groups = args.slice(0),
        params = {},
        data = {
          found, index, groups, params,
        };
      _.each(self.opts.groupsNames, (name, i) => {
        params[name] = groups[i];
      });
      _.aliases(data, {
        found: ['text', 'txt', 'str'],
        index: 'position',
        groups: ['values', 'vals', 'args'],
        params: ['data'],
      });
      results.push(data);
      if (replace && _.is.function(replace)) {
        return replace(data);
      }
      if (replace) {
        return replace;
      }
      return found;
    });
    return replace ? str : results;
  }

  vals (...args) {
    var self = this,
      res = self.find(...args);
    return res[0].groups;
  }

  replace (...args) {
    var self = this;
    return self.find(...args);
  }

}

function Regular (...args) {
  var self = new Reg(...args);
  return self;
}

_.extend(Regular, {
  fromString: _.regFromString,
  Regular,
});

module.exports = Regular;
