import WCBase from './base';
import interpolate from 'util/interpolate';

class WCKit {

  constructor () {
    var self = this;

    Object.assign(self, {
      WCBase,
      Base: WCBase
    });
    WCBase.kit = self;
  }

  repeat (tagName, items, attrs = {}) {
    var self = this;
    return items.map(item => {
      var data = {};
      Object.keys(attrs).forEach(attrName => {
        var propName = attrs[attrName],
          val = typeof propName === 'function' ? propName(item) : item[propName];
        data[attrName] = val;
      });
      return self.create(tagName, data);
    }).join('');
  }

  create (tagName, attrs) {
    var self = this,
      attrsCode = Object
        .keys(attrs)
        .filter(name => name !== '$content')
        .map(attrName => `${attrName}="${attrs[attrName]}"`)
        .join(' ');
    return `<${tagName}${attrsCode ? ' ' + attrsCode : ''}>${attrs.$content || ''}</${tagName}>`;
  }

  createElement (...attrs) {
    var self = this,
      wrapper = document.createElement('div');
    wrapper.innerHTML = self.create(...attrs);
    return wrapper.children[0];
  }

  registerElement (tagName, Class, extendTag, etag) {
    var self = this,
      tag = tagName || Class.tagName,
      metaItem = new Class(),
      meta = {
        methods: Object.getOwnPropertyNames(Class.prototype).filter(name => name !== 'constructor'),
      };

    Object.keys(metaItem).forEach(key => meta[key] = metaItem[key]);
    Class.metaData = meta;
    Object.setPrototypeOf(Class.prototype, WCBase.prototype);
    if (extendTag) {
      let t = etag || meta.extends;
      Class.extends = t;
    }
    document.registerElement(tagName, Class);
  }

  component (tagName) {
    var self = this;
    return function (Class) {
      self.registerElement(tagName, Class, false);
    };
  }

  inherit (tagName, etag) {
    var self = this;
    return function (Class) {
      self.registerElement(tagName, Class, true, etag);
    };
  }

}

export default WCKit;
