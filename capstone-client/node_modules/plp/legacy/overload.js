export default overload;

overload.types = overloadTypes;

function overload(name, ...tps) {
  return function (item, n, desc) {
    var method = desc.value,
      types = tps.length ? tps : method._overloadedTypes;
    initOverload(item, desc, name);
    item._overload(name, types, method, item);
  };
}

function overloadTypes(...types) {
  return function (item, n, desc) {
    var method = desc.value;
    method._overloadedTypes = types;
  };
}

function testTypes(vals, types) {
  var matches = true;
  if (vals.length !== types.length) {
    return false;
  }
  vals.forEach((val, i) => {
    if (types[i] === null && val === null) {
      return;
    }
    if (types[i] === undefined && val === undefined) {
      return;
    }
    if (types[i] === true && !!val) {
      return;
    }
    if (types[i] === false && !val) {
      return;
    }
    if (types[i] === 'plain' && val && typeof val === 'object' && !Array.isArray(val)) {
      return;
    }
    if (types[i] === 'plain-1' && val && typeof val === 'object'
      && !Array.isArray(val) && getLevel(val) === 1) {
      return;
    }
    if (types[i] === 'plain-2' && val && typeof val === 'object'
      && !Array.isArray(val) && getLevel(val) === 2) {
      return;
    }
    if (types[i] === 'plain-3' && val && typeof val === 'object'
      && !Array.isArray(val) && getLevel(val) === 3) {
      return;
    }
    if (types[i] === 'array' && val && Array.isArray(val)) {
      return;
    }
    if (typeof types[i] === 'string' && typeof val === types[i]) {
      return;
    }
    if (typeof types[i] === 'function' && val instanceof types[i]) {
      return;
    }
    matches = false;
  });
  return matches;
}

function initOverload(item, desc, name) {
  var data = {};
  if (item._overloaded) {
    return;
  }
  item[name] = function (...args) {
    return item._callOverloaded(name, args);
  };
  Object.defineProperties(item, {
    _overloaded: {
      get () {
        return true;
      },
    },
    _overload: {
      value: function (name, types, handler, context) {
        data[name] = data[name] || [];
        data[name].push({ types, handler, context });
      },
    },
    _callOverloaded: {
      value: function (name, args) {
        var done = false;
        (data[name] || [])
          .forEach(method => {
            if (!testTypes(args, method.types)) {
              return;
            }
            method.handler.apply(method.context || null, args);
            console.log(name, args, method, method.context);
            done = true;
          });
        if (!done) {
          throw new Error(`Overloaded method Â«${name}Â» of class Â«${item.constructor.name}Â» for args ${JSON.stringify(args)} not found!`);
        }
      },
    },
  });
}

function getLevel(obj) {
  var level = 1;

  add(obj, level);

  return level;

  function add(d, l) {
    if (!d || typeof d !== 'object' || Array.isArray(d)) {
      return;
    }
    level = l > level ? l : level;
    Object.keys(d).forEach(key => {
      add(d[key], l++);
    });
  }
}
