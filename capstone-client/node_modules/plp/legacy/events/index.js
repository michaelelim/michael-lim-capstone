import dom from 'util/domtools';
import overload from 'util/overload';

class Events {

  @overload('on', Element, 'string', 'function')
  bind (elem, name, handler) {
    var self = this;
    elem.addEventListener(name, ev => {
      handler(ev, ev.target);
    }, false);
    return self;
  }

  bindAll (elem, events) {
    var self = this;
    Object.keys(events).forEach(eventName => {
      self.bind(elem, eventName, events[eventName]);
    });
    return self;
  }

  @overload('on', Element, 'string', 'string', 'function')
  delegate (elem, selector, eventName, handler) {
    var self = this;
    return self.bind(elem, eventName, (ev, elem) => {
      var target = dom.findParent(elem, selector, true);
      if (!target) return;
      handler(ev, target);
    });
  }

  @overload('on', Element, 'plain')
  delegateAll (elem, data) {
    var self = this;
    Object.keys(data).forEach(selector => {
      var events = data[selector];
      if (typeof events === 'function') {
        return self.bind(elem, selector, events);
      }
      Object.keys(events).forEach(eventName => {
        var handler = events[eventName];
        self.delegate(elem, selector, eventName, handler);
      });
    });
    return self;
  }

}

export default new Events();
