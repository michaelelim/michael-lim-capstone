'use strict';

const loaderUtils = require('loader-utils');

const _ = {
  extend: require('../extend'),
  get: require('../get'),
  query: require('../query'),
  dasherize: require('../dasherize'),
  camelCase: require('../camelcase'),
};

class Loader {

  static get loader () {
    var LoaderClass = this;
    return function (source) {
      var self = this,
        loader = new LoaderClass(source, self);
    	self.cacheable && self.cacheable();
    	return loader.render();
    };
  }

  constructor (source, context) {
    var self = this,
      loaderUid = _.dasherize('CortStylusLoader').split('-').slice(0, -1).join('-'),
      loaderName = _.camelCase(loaderUid);
    _.extend(self, {
      loaderUid,
      loaderName,
      source,
      context,
      query: _.query(context.query),
      filename: context.resourcePath,
      minimize: !!context.minimize,
      config: context.options,
      dir: context.context,
      options: loaderUtils.getOptions(context),
    });
  }

  get _ () {
    var self = this;
    return self.context;
  }

  get opts () {
    var self = this;
    return self.options || {};
  }

  getCallback () {
    var self = this,
      cb = self._.async(),
      isSync = typeof cb !== 'function',
      finalCb = cb || self._.callback;
    return finalCb;
  }

  exportText (t = '') {
    var self = this,
      text = encodeURIComponent(t);
    return `module.exports = decodeURIComponent("${text}");`;
  }

  exportJSON (data) {
    var self = this;
    return `module.exports = ${JSON.stringify(data)};`;
  }

  render () {
    var self = this;
    return self.exportText(self.source);
  }

}

module.exports = Loader;
