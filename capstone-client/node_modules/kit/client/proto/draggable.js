'use strict';

const state = {
  icons: {},
};

Object.assign(Element.prototype, {

  drag (opts = {}) {
    var self = this;
    self.draggable = true;

    if (opts.icon) {
      document.cacheImage(opts.icon);
    }

    self.on({

      dragstart (ev) {
        ev.dataTransfer.dropEffect = 'move';
        ev.dataTransfer.effectAllowed = 'move';
        self.dataset.dragging = 'dragging';
        typeof opts.onDragstart === 'function' ? opts.onDragstart(ev) : '';
        typeof opts.icon === 'string' ? setDragIcon(ev, opts.icon, opts.iconX, opts.iconY) : '';
      },

      drag (ev) {
        ev.dataTransfer.dropEffect = 'move';
        ev.dataTransfer.effectAllowed = 'move';
        typeof opts.onDrag === 'function' ? opts.onDrag(ev) : '';
      },

      dragend (ev) {
        ev.dataTransfer.dropEffect = 'move';
        ev.dataTransfer.effectAllowed = 'move';
        delete self.dataset.dragging;
        typeof opts.onDragend === 'function' ? opts.onDragend(ev) : '';
      },

    });
  },

  drop (opts) {
    var self = this;

    if (opts.icon) {
      document.cacheImage(opts.icon);
    }

    self.on({

      dragenter (ev) {
        ev.dataTransfer.dropEffect = 'move';
        ev.dataTransfer.effectAllowed = 'move';
        self.dataset.dragover = 'dragover';
        typeof opts.onDragenter === 'function' ? opts.onDragenter(ev) : '';
        typeof opts.icon === 'string' ? setDragIcon(ev, opts.icon, opts.iconX, opts.iconY) : '';
      },

      dragover (ev) {
        ev.dataTransfer.dropEffect = 'move';
        ev.dataTransfer.effectAllowed = 'move';
        ev.preventDefault();
        typeof opts.onDragover === 'function' ? opts.onDragover(ev) : '';
        typeof opts.icon === 'string' ? setDragIcon(ev, opts.icon, opts.iconX, opts.iconY) : '';
      },

      dragleave (ev) {
        ev.dataTransfer.dropEffect = 'move';
        ev.dataTransfer.effectAllowed = 'move';
        delete self.dataset.dragover;
        typeof opts.onDragleave === 'function' ? opts.onDragleave(ev) : '';
        typeof opts.icon === 'string' ? setDragIcon(ev, opts.icon, opts.iconX, opts.iconY) : '';
      },

      drop (ev) {
        ev.dataTransfer.dropEffect = 'move';
        ev.dataTransfer.effectAllowed = 'move';
        ev.preventDefault();
        delete self.dataset.dragover;
        typeof opts.onDragdrop === 'function' ? opts.onDragdrop(ev) : '';
        typeof opts.icon === 'string' ? setDragIcon(ev, opts.icon, opts.iconX, opts.iconY) : '';
      },

    });
  },

});

function setDragIcon(ev, url, x = 0, y = 0) {
  var img = document.createElement('img');
  img.src = url;
  ev.dataTransfer.setDragImage(img, x || 0, y || 0);
}
