var state = {
  draggable: {},
  dropzones: {},
  current: null,
  img: null
};

var mod = {

  draggable(elem, options) {
    var id = elem.uid;
    elem.draggable = true;
    elem.dataset.draggable = id;
    options.icon = options.icon;
    if (options.icon && options.icon.url) {
      options.icon.img = loadImage(options.icon.url);
    }
    state.draggable[id] = {
      elem: elem,
      icon: options.icon,
      data: options.data,
      startHandler: options.dragstart ||
        options.onstart ||
        options.start,
      dragHandler: options.drag ||
        options.move ||
        options.ondrag,
      endHandler: options.dragend ||
        options.onend ||
        options.end
    };
  },

  dropzone(elem, options) {
    var id = elem.uid;
    elem.dataset.dropzone = id;
    if (options.icon && options.icon.url) {
      options.icon.img = loadImage(options.icon.url);
    }
    state.dropzones[id] = {
      elem: elem,
      dropHandler: options.handler ||
        options.ondrop ||
        options.drop,
      overHandler: options.dragover ||
        options.over,
      enterHandler: options.dragenter ||
        options.enter,
      leaveHandler: options.dragleave ||
        options.leave,
      filter: options.filter || '*'
    };
  },

};

// Draggable

document.addEventListener('dragstart', restrictDraggable(function (ev, sub) {
  sub.elem.dataset.dragging = 'dragging';
  sub.elem.addClass('dragging');
  if (sub.icon) {
    setDragIcon(ev, sub.icon);
  }
  if (sub.startHandler) {
    sub.startHandler(ev, sub.elem);
  }
}), false);

document.addEventListener('drag', restrictDraggable(function (ev, sub) {
  if (sub.dragHandler) {
    sub.dragHandler(ev, sub.elem);
  }
}), false);

document.addEventListener('dragend', restrictDraggable(function (ev, sub) {
  delete sub.elem.dataset.dragging;
  sub.elem.removeClass('dragging');
  if (sub.endHandler) {
    sub.endHandler(ev, sub.elem);
  }
}), false);

// Dropzone

document.addEventListener('dragenter', restrictDropzone(function (ev, zone, sub) {
  zone.elem.dataset.dragover = 'dragover';
  zone.elem.addClass('dragover');
  if (zone.enterHandler) {
    zone.enterHandler(ev, sub.elem, zone.elem);
  }
}), false);

document.addEventListener('dragover', restrictDropzone(function (ev, zone, sub) {
  ev.preventDefault();
  if (zone.icon) {
    setDragIcon(ev, zone.icon);
  }
  if (zone.overHandler) {
    zone.overHandler(ev, sub.elem, zone.elem);
  }
}), false);

document.addEventListener('dragleave', restrictDropzone(function (ev, zone, sub) {
  delete zone.elem.dataset.dragover;
  zone.elem.removeClass('dragover');
  if (zone.leaveHandler) {
    zone.leaveHandler(ev, sub.elem, zone.elem);
  }
}), false);

document.addEventListener('drop', restrictDropzone(function (ev, zone, sub) {
  ev.preventDefault();
  ev.stopPropagation();

  if (zone.dropHandler) {
    ev.data = sub.data || {};
    zone.dropHandler(ev, sub.elem, zone.elem);
  }

  delete zone.elem.dataset.dragover;
  zone.elem.removeClass('dragover');
}), false);

function restrictDraggable(handler) {
  return function (ev) {
    var elem = ev.target,
      subject = state.draggable[elem.dataset.draggable];
    if (!subject) {
      return;
    }
    state.current = elem;
    ev.dataTransfer.dropEffect = 'move';
    ev.dataTransfer.effectAllowed = 'move';
    handler(ev, subject);
  };
}

function restrictDropzone(handler) {
  return function (ev) {
    var elem = ev.target,
      zone = state.dropzones[elem.dataset.dropzone],
      dropped = state.current,
      sub = dropped ? state.draggable[dropped.dataset.draggable] : {
        file: true
      };
    if (!zone || (dropped && !dropped.matches(zone.filter))) {
      return;
    }
    ev.dataTransfer.dropEffect = 'move';
    ev.dataTransfer.effectAllowed = 'move';
    handler(ev, zone, sub);
  };
}

function setDragIcon(ev, icon) {
  var img = icon.img;
  state.img = img;
  ev.dataTransfer.setDragImage(img, (icon.x || 0), (icon.y || 0));
}

function loadImage(url) {
  img = document.createElement('img');
  img.src = url;
  return img;
}
