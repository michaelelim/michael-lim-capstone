'use strict';

const _ = require('lodash');
const fs = require('fs');
const path = require('path');
const stylus = require('../styles');
const moduleTemplate = fs.readFileSync(path.join(__dirname, 'module.tmpl.html'), 'utf-8');
const scriptTemplate = fs.readFileSync(path.join(__dirname, 'script.tmpl.js'), 'utf-8');
const cml = require('cortml');
const pretty = require('pretty');
const packer = require('../packer');
const util = require('../util');

class Module {

  constructor (filename, opts) {
    var self = this,
      dirname = path.dirname(filename),
      name = path.basename(filename, path.extname(filename)),
      md = cml.loadFile(filename);
    Object.assign(self, {
      opts,
      module: md,
      filename,
      md: md,
      dependencies: (md.dependencies || []).concat(md.deps || []),
      dirname: dirname,
      name: name,
      renderedFilename: null,
    });
  }

  get files () {
    var self = this,
      f = (self.md || {}).files || {};
    return {
      module: self.filename,
      template: self.getFilename(f.template, '.template', 'html'),
      style: self.getFilename(f.style, '.style', 'styl'),
      controller: self.getFilename(f.controller, '.controller', 'js'),
      dist: self.getFilename(f.dist, '', 'html', true),
    };
  }

  resolve (...args) {
    var self = this;
    return path.resolve(self.dirname, ...args);
  }

  r (...args) { return this.resolve(...args); }

  getFilename (value, suffix, ext, skipResolve = false) {
    var self = this,
      name = value || `${self.name}${suffix}.${ext}`,
      basename = path.basename(name, path.extname(name));
    if (!name.includes(`${suffix}.`)) {
      name = `${name}${suffix}.${ext}`;
    }
    if (path.extname(name) !== `.${ext}`) {
      name = `${name}.${ext}`;
    }
    return skipResolve ? name : self.r(name);
  }

  renderOuter (opts = {}) {
    var self = this,
      code = '',
      deps = opts.dependencies || [];
    _.uniq(deps.concat(self.dependencies || [])).forEach(url => {
      code += '\n';
      if (path.extname(url) === '.html') {
        return code += `<link rel="import" href="${url}" />`;
      }
      if (path.extname(url) === '.css') {
        return code += `<link rel="stylesheet" href="${url}" />`;
      }
      if (path.extname(url) === '.js') {
        return code += `<script src="${url}"></script>`;
      }
    });
    return code.trim();
  }

  renderCSS () {
    var self = this;
    if (!fs.existsSync(self.files.style)) {
      return '';
    }
    return stylus.renderFile(self.files.style);
  }

  renderHTML () {
    var self = this;
    if (!fs.existsSync(self.files.template)) {
      return '';
    }
    return fs.readFileSync(self.files.template, 'utf-8');
  }

  renderController () {
    var self = this;
    return new Promise((resolve, reject) => {
      if (!fs.existsSync(self.files.controller)) {
        return resolve('class Controller {}');
      }
      var source = fs.readFileSync(self.files.controller, 'utf-8'),
        controllerName = 'Controller',
        temp = source.replace(/class\s+([a-zA-Z0-9_$]+Controller)\s*/, (txt, name) => {
          controllerName = name;
        });
      packer
        .packFile(self.files.controller, {
          output: {
            library: controllerName,
            libraryTarget: 'var',
          },
          logLevel: self.opts.logLevel,
        })
        .then(code => {
          resolve(`
            (function () {
              ${code};
              return ${controllerName};
            }())
          `);
        });
    });
  }

  renderStyleAttrs () {
    var self = this,
      code = '';
    if (self.module.includeStyle) {
      code += ` include="${self.module.includeStyle}"`;
    }
    if (self.module.customStyle) {
      code += ` is="custom-style"`;
    }
    return code;
  }

  renderScript (controller) {
    var self = this,
      code = scriptTemplate
        .replace('{{tagName}}', self.module.tagName || self.module.name)
        .replace('{{controller}}', controller);
    if (self.module.min) {
      code = packer.minifier.minifyJS(code);
    }
    return code;
  }

  render (opts = {}) {
    var self = this;
    return self
      .renderController()
      .then(controllerCode => {
        var outerCode = self.renderOuter(opts),
          moduleCode = moduleTemplate
            .replace('{{moduleId}}', self.module.moduleId || self.module.tagName || self.module.name)
            .replace('{{tagName}}', self.module.tagName || self.module.name)
            .replace('{{css}}', self.renderCSS())
            .replace('{{html}}', self.renderHTML())
            .replace('{{js}}', self.renderScript(controllerCode))
            .replace('{{styleAttrs}}', self.renderStyleAttrs())
            .replace('<dom-module', '\n\n<dom-module'),
          code = `${outerCode}\n\n${pretty(moduleCode)}`;

        if (self.module.min) {
          code = packer.minifier.minifyHTML(code);
        }

        return code;
      });
  }

  renderFile (f, opts) {
    var self = this,
      filename = f || self.files.dist;
    return self
      .render(opts)
      .then(html => {
        util.ensurePath(path.dirname(filename));
        fs.writeFileSync(filename, html);
        self.renderedFilename = filename;
        return html;
      });
  }

}

module.exports = Module;
