'use strict';

const _ = require('lodash');
const email = require('emailjs');
const path = require('path');
const mime = require('mime');

class Email {

  constructor (opts) {
    var self = this;

    self.opts = _.extend({
			from: '',
	    host: '',
	    user: '',
	    password: '',
	    to: '',
	    subject: '',
	    files: [],
      text: '',
      html: '',
      ssl: true,
		}, opts);
  }

  sendHtml (opts) {
    var self = this;
    return self.send({
      text: opts.text || self.opts.text || '',
      from: opts.from || self.opts.from || '',
      to: opts.to || self.opts.to || '',
      subject: opts.subject || self.opts.subject || '',
      attachment: self
        .wrapFiles(opts.files || self.opts.files || [])
        .concat([{
          data: opts.html || self.opts.html || '',
          alternative: true,
        }]),
    });
  }

  sendText (opts) {
    var self = this;
    return self.send({
			text: opts.text || self.opts.text || '',
			from: opts.from || self.opts.from || '',
			to: opts.to || self.opts.to || '',
			subject: opts.subject || self.opts.subject || '',
			attachment: self.wrapFiles(opts.files || self.opts.files || []),
		});
  }

  send (data) {
    var self = this;
    return new Promise((resolve, reject) => {
      var server = self.connect();
      server.send(data, (err, message) => {
        if (err) return reject(err);
        resolve(message);
      });
    });
  }

  wrapFiles (files) {
    var self = this;
    return files.map(filename => {
      return {
        path: filename,
        name: path.basename(filename),
        type: mime.lookup(filename),
      };
    });
  }

  connect (opts) {
    var self = this;
    return email.server.connect(_.extend({}, self.opts, opts));
  }

}

module.exports = Email;
