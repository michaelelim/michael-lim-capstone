function parseFunctionArgs(fn) {
  return fn
    .toString()
    .split(')')[0]
    .split('(')[1]
    .split(',')
    .map(arg => arg.trim());
}

function createPromiseFactory(fn, ctx) {
  return function (...args) {
    var context = _.extend({}, ctx),
      argsNames = parseFunctionArgs(fn);
    return new Promise((resolve, reject) => {
      if (argsNames.includes('resolve') || argsNames.includes('res')) {
        return fn.apply(context, args.concat([resolve, reject]));
      }
      try {
        var result = fn.apply(context, args);
        if (result instanceof Promise) {
          return result.then(resolve).catch(reject);
        }
        resolve(result);
      } catch(err) {
        reject(err);
      }
    });
  };
}

module.exports = createPromiseFactory;
