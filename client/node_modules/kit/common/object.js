'use strict';

const flattenArray = require('./flatten-array');

class ObjectCommon {

  constructor () {
    var self = this;
  }

  unflatten (obj) {
    var self = this,
      data = {};
    Object.keys(obj).forEach((name) => {
      self.set(data, name, obj[name]);
    });
    return data;
  }

  flatten (obj, parentName, skipArrays = false) {
    var self = this,
      data = {};
    if (Array.isArray(obj)) return flattenArray(obj);
    parentName = parentName || '';
    Object.keys(obj).forEach((name) => {
      var val = obj[name];
      name = parentName ? parentName + '.' + name : name;
      if (typeof val !== 'object' || (skipArrays && Array.isArray(val))) {
        data[name] = val;
        return;
      }
      Object.assign(data, self.flatten(val, name));
    });
    return data;
  }

  set (obj, p, value) {
    var current = obj,
      names = p.split('.'),
      name;
    for (var i = 0; i < names.length - 1; i++) {
      name = names[i];
      if (!current[name]) {
        current[name] = {};
      }
      current = current[name];
    }
    current[names.pop()] = value;
    return obj;
  }

  get (obj, p) {
    var current = obj,
      names = p.split('.'),
      name;
    for (var i = 0; i < names.length - 1; i++) {
      name = names[i];
      if (typeof current[name] !== 'object' || current[name] === null) {
        return defaultValue;
      }
      current = current[name];
    }
    return current[names.pop()];
  }

  keys (item) {
    var self = this;
    return Object.keys(item);
  }

  names (item) {
    var self = this;
    return Object.getOwnPropertyNames(item);
  }

  extend (dest, ...args) {
    var self = this;
    return Object.assign(dest, ...args);
  }

  clone (obj) {
    var self = this;
    if (!obj || typeof obj !== 'object') {
      return obj;
    }
    if (Array.isArray(obj)) {
      return obj.slice(0);
    }
    return Object.assign({}, obj);
  }

  values (obj) {
    var self = this;
    return Object
      .keys(obj)
      .map((key) => obj[key]);
  }

}

module.exports = ObjectCommon;
