'use strict';

const _ = require('lodash');
const colors = require('colors');
const fs = require('fs');

class Message extends Function {

  static loadFile (filename, data) {
    return Message.parseMessages(
      fs.readFileSync(filename, 'utf-8'),
      data
    );
  }

  static setData(name, val) {
    if (arguments.length === 1 && name && typeof name === 'object') {
      return _.each(name, (val, name) => {
        Message.setData(name, val);
      });
    }
    Message.data = Message.data || {};
    _.set(Message.data, name, val);
    return val;
  }

  static create(content, data) {
    var Class = this,
      fn = message;
    Object.setPrototypeOf(fn, Message.prototype);
    fn.init(content, data);
    return fn;

    function message(...args) {
      return message.log(...args);
    }
  }

  static replace(content, data) {
    return content.replace(/\{\{(.+?)\}\}/mgi, (txt, name) => {
      var val = _.get(data, name);
      if (val === undefined) {
        return txt;
      }
      return val;
    });
  }

  static parseMessages(source, data) {
    var messages = {};
    source.replace(/\#\#(.+)[\s\S]*?\`\`\`([\s\S]*?)\`\`\`/mgi, (txt, n, content) => {
      var text = content.slice(1, -1),
        name = n.trim(),
        baseName = name.split('.').pop(),
        parentName = name.slice(0, name.lastIndexOf('.')),
        parent = _.get(messages, parentName) || {},
        message = Message.create(text, data);

      _.set(messages, parentName, parent);
      parent[baseName] = message;
    });
    return messages;
  }

  init(content, data) {
    var self = this;
    self.content = content;
    self.data = data || {};
  }

  render(d) {
    var self = this,
      selfData = typeof self.data === 'function' ? self.data() : self.data,
      data = _.extend({}, Message.data, selfData || {}, d || {}),
      content = self.content || '';
    return Message.replace(content, data);
  }

  toString() {
    var self = this;
    return self.render();
  }

  valueOf() {
    var self = this;
    return self.toString();
  }

  toJSON() {
    var self = this;
    return self.toString();
  }

  // Logs ======================================================================

  print(data = {}, color='white') {
    var self = this,
      text = `\n${self.render(data)}`[color];
    process.stdout.write(text + '');
  }

  info (data) {
    var self = this;
    return self.print(data, 'cyan');
  }

  warn (data) {
    var self = this;
    return self.print(data, 'yellow');
  }

  log(data) {
    var self = this;
    return self.print(data, 'grey');
  }

  success(data) {
    var self = this;
    return self.print(data, 'green');
  }

  error(data) {
    var self = this;
    return self.print(data, 'red');
  }

  err(...args) {
    return self.error(...args);
  }

}

module.exports = (filename, data) => {
  return Message.loadFile(filename, data);
};
