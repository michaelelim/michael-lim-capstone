'use strict';

const _ = require('lodash');
const fs = require('fs');
const path = require('path');
const Module = require('./module');
const wrench = require('wrench');
const colors = require('colors');
const util = require('../util');
const chokidar = require('chokidar');

class Entry {

  constructor (name, opts, project) {
    var self = this;
    _.extend(self, {
      name: name,
      input: `${name}`,
      output: `${name}`,
      index: `${name}/index.html`,
      dependencies: [],
      project: project,
      indexDependencies: [],
      min: !!opts.min,
    }, opts);
  }

  // Build =====================================================================

  build () {
    var self = this,
      files = self.getFiles(),
      chain = files
        .map(filename => self.buildFile(filename));

    console.log(`> `.grey + `Start building entry ` + `«${self.name}»`.cyan.bold + `...`);

    util.ensurePath(self.getOutputDir());

    return Promise
      .all(chain)
      .then(mods => {
        self.writeIndexFile(self.getUrlsByModules(mods));
        console.log(`> `.grey + `Created index file ` + `«${self.rel(self.getIndexFilename())}»`.green.bold + `.`);
        return mods;
      })
      .then(mods => {
        console.log(`> `.grey + `Entry ` + `«${self.name}»`.green.bold + ` builded successfully...`);
        return mods;
      });
  }

  getFiles () {
    var self = this,
      dir = self.getInputDir(),
      files = wrench
        .readdirSyncRecursive(dir)
        .filter(file => ['.yaml', '.cml'].includes(path.extname(file)))
        .map(file => path.join(dir, file));
    return files;
  }

  getUrlsByModules (mods) {
    var self = this,
      indexDir = path.dirname(self.getIndexFilename()),
      urls = mods
        .map(mod => mod.renderedFilename)
        .map(url => path.relative(indexDir, url))
        .map(url => `./${url}`);
    return urls;
  }

  writeIndexFile (u = []) {
    var self = this,
      urls = (self.indexDependencies || []).concat(u),
      code = urls
        .map(url => {
          if (path.extname(url) === '.html') {
            return `<link rel="import" href="${url}" />`;
          }
          if (path.extname(url) === '.css') {
            return `<link rel="stylesheet" href="${url}" />`;
          }
          if (path.extname(url) === '.js') {
            return `<script src="${url}"></script>`;
          }
        })
        .join('\n');
    fs.writeFileSync(self.getIndexFilename(), code);
  }

  buildFile (f) {
    var self = this,
      filename = self.resolveInput(f),
      mod = new Module(filename, {
        min: self.min,
        logLevel: 0,
      }),
      output = path.join(self.getOutputDir(), mod.files.dist),
      message = `> `.grey + `Compiled ` + `«${self.rel(filename)}»`.cyan.bold
        + ` -> `.bold + `«${self.rel(output)}»`.green.bold
        + `.`;
    return mod
      .renderFile(output, {
        dependencies: self.getDependencies(),
      })
      .then(() => console.log(message))
      .then(() => mod);
  }

  getDependencies () {
    var self = this,
      deps = self.project.opts.dependencies || [];
    return _.uniq(deps.concat(self.dependencies || []));
  }

  // Paths =====================================================================

  resolveInput (...args) {
    var self = this;
    return path.resolve(self.getInputDir(), ...args);
  }

  resolveOutput (...args) {
    var self = this;
    return path.resolve(self.getOutputDir(), ...args);
  }

  getYamlFilename (filename) {
    var self = this,
      dir = path.dirname(filename),
      name = `${path.basename(filename).split('.').shift()}.yaml`;
    return path.resolve(dir, name);
  }

  getInputDir () {
    var self = this;
    return self.r(self.project.opts.input || '.', self.input);
  }

  getOutputDir () {
    var self = this;
    return self.r(self.project.opts.output || '.', self.output);
  }

  getIndexFilename () {
    var self = this;
    return path.resolve(self.getOutputDir(), self.index);
  }

  resolve (...args) { return this.project.resolve(...args); }
  r (...args) { return this.project.resolve(...args); }

  rel (...args) { return this.project.rel(...args); }

}

class Project {

  constructor (root, opts = {}) {
    var self = this;
    self.root = root;
    self.opts = _.extend({
      output: 'dist',
      dependencies: [],
      entry: {},
    }, opts);
  }

  watch () {
    var self = this,
      files = [];
    self
      .build()
      .then(() => {
        _.values(self.getEntries()).forEach(entry => {
          files = files.concat([
            entry.resolveInput('**/**.yaml'),
            entry.resolveInput('**/**.template.html'),
            entry.resolveInput('**/**.controller.js'),
            entry.resolveInput('**/**.style.styl'),
          ]);
        });
        chokidar
          .watch(files, {
            usePolling: true,
            persistent: true,
            interval: 100,
            binaryInterval: 300,
          })
          .on('change', filename => {
            var entry = self.getEntryByFilename(filename);
            entry.buildFile(entry.getYamlFilename(filename));
          });
        console.log(`> `.grey + `Watch`.cyan.bold + ` files...`);
      });
  }

  getEntryByFilename (filename) {
    var self = this,
      yamlFilename = self.getYamlFilename(filename),
      entry = null;
    _
      .values(self.getEntries())
      .forEach(item => {
        if (!yamlFilename.startsWith(item.getInputDir())) return;
        entry = item;
      });

    return entry;
  }

  build () {
    var self = this,
      entries = _.values(self.getEntries());
    return Promise
      .all(entries.map(entry => entry.build()))
      .then(() => {
        console.log(`> `.grey + `Project ` + `builded.`.green.bold);
        return entries;
      });
  }

  getEntries () {
    var self = this,
      entries = {};
    _.each(self.opts.entry, (data, name) => {
      var entry = new Entry(name, data, self);
      entries[name] = entry;
    });
    return entries;
  }

  resolve (...args) {
    var self = this;
    return path.resolve(self.root, ...args);
  }

  r (...args) { return this.resolve(...args); }

  relative (...args) {
    var self = this;
    return path.relative(self.root, ...args);
  }

  rel (...args) { return this.relative(...args); }

  getYamlFilename (filename) {
    var self = this,
      dir = path.dirname(filename),
      name = `${path.basename(filename).split('.').shift()}.yaml`;
    return path.resolve(dir, name);
  }

}

module.exports = Project;
