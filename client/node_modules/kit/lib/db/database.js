'use strict';

const _ = require('lodash');
const mongoose = require('mongoose');
const autoIncrement = require('mongoose-auto-increment');
const Schema = mongoose.Schema;

mongoose.Promise = global.Promise;

require('require.fresh')(module, require);

class Database {

  constructor (name) {
    var self = this;
    self.name = name;
    self.url = `mongodb://localhost/${name}`;
    self.models = {};
    self.connection = null;

    self.connect();
  }

  loadFromDir (dirname) {
    var self = this;
    fs
      .readdirSync(dirname)
      .forEach(file => {
        var filename = path.join(dirname, file);
        if (path.extname(filename) !== '.js' || file === 'index.js') return;
        var name = _.camelCase(path.basename(file, path.extname(file)));
        self.addModel(name[0].toUpperCase() + name.slice(1), require.fresh(filename));
      });
  }

  addModel (name, opts) {
    var self = this,
      model = mongoose.model(name, self.createSchema(name, opts));
    self.models[name] = model;
    return self;
  }

  connect () {
    console.log(this.url);
    var self = this,
      connection = mongoose.connect(self.url);
    autoIncrement.initialize(connection);
    return self;
  }

  createSchema (name, opts) {
    var self = this,
      schema = new Schema(opts.fields);
    _.extend(schema.statics, opts.list);
    _.each(opts.item, (method, name) => {
      schema.methods[name] = function (...args) {
        var self = this;
        return method(self, ...args);
      };
    });
    schema.plugin(autoIncrement.plugin, {
      model: name,
      field: 'id'
    });
    return schema;
  }

}

module.exports = Database;
