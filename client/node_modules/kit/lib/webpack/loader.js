'use strict';

const _ = require('lodash');
const utils = require('loader-utils');
const common = require('../../common');

class Loader {
  
  static get loader () {
    var LoaderClass = this;
    return function (source) {
      var self = this,
        loader = new LoaderClass(source, self);
    	self.cacheable && self.cacheable();
    	self.value = source;
    	return loader.render();
    };
  }
  
  constructor (source, context) {
    var self = this,
      loaderUid = _.kebabCase('CortStylusLoader').split('-').slice(0, -1).join('-'),
      loaderName = _.camelCase(loaderUid);
    _.extend(self, {
      loaderUid,
      loaderName,
      source,
      context,
      query: common.query(context.query),
      filename: context.resourcePath,
      minimize: !!context.minimize,
      config: context.options,
      dir: context.context,
      options: _.get(context.options, loaderUid.replace(/\-/, '.')),
    });
  }
  
  get _ () {
    var self = this;
    return self.context;
  }
  
  get opts () {
    var self = this;
    return self.options;
  }
  
  getCallback () {
    var self = this,
      cb = self._.async(),
      isSync = typeof cb !== 'function',
      finalCb = cb || self._.callback;
    return finalCb;
  }
  
  exportText (text) {
    var self = this;
    return `module.exports = \`${text}\`;`;
  }
  
  exportJSON (data) {
    var self = this;
    return `module.exports = ${JSON.stringify(data)};`;
  }
  
  render () {
    var self = this;
    return self.exportText(self.source);
  }
  
}

module.exports = Loader;
