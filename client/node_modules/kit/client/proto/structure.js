'use strict';

Object.assign(Element.prototype, {

  toBody () {
    var self = this;
    return self.appendTo(document.body);
  },

  beforeTo (sibling) {
    var self = this;
    sibling.before(self);
    return self;
  },

  before (child) {
    var self = this,
      parent = self.parent;
    if (!parent || !child) return self;
    parent.insertBefore(child, self);
    return self;
  },

  afterTo (sibling) {
    var self = this;
    sibling.after(self);
    return self;
  },

  after (child) {
    var self = this,
      parent = self.parent,
      next = self.nextSibling;
    if (!parent || !child) return self;
    if (!next) {
      parent.appendChild(child);
      return self;
    }
    parent.insertBefore(child, next);
    return self;
  },

  append (child) {
    var self = this,
      cl = child.data._classes;
    if (cl && cl.length) {
      cl.forEach(val => {
        if (val.startsWith('__')) {
          val = `${self.classList[0]}${val}`;
        }
        child.classList.add(val);
      });
    }
    self.appendChild(child);
    return self;
  },

  appendTo (parent) {
    var self = this;
    parent.appendChild(self);
    return self;
  },

  saveTo (obj, name) {
    var self = this;
    obj.data[name] = self;
    return self;
  },

  getParents (includeSelf) {
    var self = this,
      parents = includeSelf ? [self] : [],
      parent = self.parent;
    while (parent && parent !== document) {
      parents.push(parent);
      parent = parent.parent;
    }
    return parents
      .filter(parent => parent instanceof Element);
  },

  findParent (selector) {
    var self = this,
      parents = self.getParents(true),
      parent = null;
    parents.forEach(item => {
      if (parent || !item.matches(selector)) return;
      parent = item;
    });
    return parent;
  },

  back (sel) {
    var self = this;
    if (typeof sel === 'number') {
      for (let i = 0; i < sel; i++) {
        self = self.parent;
      };
      return self;
    }
    if (sel) return self.findParent(sel);
    return self.parent || self;
  },

  up (sel) { return this.back(sel); },

  to (sel) { return this.back(sel); },

  out (sel) { return this.back(sel); },

  top () {
    var self = this;
    return self.back('body');
  },

});

Object.defineProperty(Element.prototype, `_`, {
  get () {
    var self = this;
    return self.back();
  },
});
Object.defineProperty(Element.prototype, `__`, {
  get () {
    var self = this;
    return self.back().back();
  },
});
Object.defineProperty(Element.prototype, `___`, {
  get () {
    var self = this;
    return self.back().back().back();
  },
});

Object.defineProperty(Element.prototype, 'parent', {
  get () {
    var self = this;
    return self.parentElement || self.parentNode;
  },
});

// ['_', '__', '___', '____', '_____',
// '______', '_______', '________'].forEach(sign => {
//   Object.defineProperty(Element.prototype, sign, {
//     get () {
//       var self = this;
//       for (let i = 0; i < sign.length; i++) {
//         self = self.back();
//       }
//       return self;
//     },
//   });
// });
