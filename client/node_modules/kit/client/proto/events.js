'use strict';

const eventsNames = [
  'click', 'iclick',
  'mousedown', 'mousemove', 'mouseup',
  'keydown', 'keypress', 'keyup'
];

Object.assign(Element.prototype, {

  on (name, handler, delegateHandler) {
    var self = this;
    if (typeof name === 'function') {
      name = name.call(self);
    }
    if (typeof name === 'object') {
      var events = name;
      if (typeof events === 'function') {
        events = events.call(self);
      }
      Object.keys(events).forEach(name => {
        var handler = events[name];
        if (typeof handler === 'function') {
          self.on(name, handler);
          return;
        }
        Object.keys(handler).forEach(eventName => {
          self.on(eventName, name, handler[eventName]);
        });
      });
    } else if (typeof name === 'string' && typeof handler === 'function') {
      if (name === 'iclick') {
        name = 'mousedown';
        var originalHandler = handler;
        handler = function (ev) {
          if (ev.which !== 1) {
            return;
          }
          originalHandler();
        };
      }
      self.addEventListener(name, handler, false);
    } else if (typeof name === 'string'
      && typeof handler === 'string'
      && typeof delegateHandler === 'function') {
      return self.delegate(name, handler, delegateHandler);
    }
    return self;
  },

  delegate (name, selector, handler) {
    var self = this;
    self.on(name, function (ev) {
      var target = ev.target,
        done = false;
      if (target.matches(selector)) {
        handler.call(self, ev, target);
        return self;
      }
      target.getParents().forEach(function (parent) {
        if (done || !parent.matches(selector)) {
          return self;
        }
        handler.call(self, ev, parent);
      });
    });
    return self;
  },

});

eventsNames.forEach(name => {
  Element.prototype[name] = function (...args) {
    var self = this;
    args.unshift(name);
    return this.on.apply(self, args);
  };
});
