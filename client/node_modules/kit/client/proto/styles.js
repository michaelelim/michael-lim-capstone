'use strict';

Object.assign(Element.prototype, {

  css (name, value) {
    var self = this;
    if (arguments.length === 2) {
      self.style[name] = value;
      return self;
    }
    if (arguments.length === 1 && typeof name === 'string') {
      return window
        .getComputedStyle(self, null)
        .getPropertyValue(name);
    }
    if (arguments.length === 1) {
      Object
        .keys(name)
        .forEach(key => self.css(key, name[key]));
      return self;
    }
    let data = {},
      styles = window.getComputedStyle(self, null);
    Array
      .from(styles)
      .forEach(name => data[name] = styles.getPropertyValue(name));
    return data;
  },

});

Object.defineProperties(Element.prototype, {

  width: {
    get () {
      var self = this,
        st = window.getComputedStyle(self);
      return +st.width.replace('px', '');
    },
    set (val) {
      var self = this;
      self.style.width = p(val);
      return self;
    }
  },

  height: {
    get () {
      var self = this,
        st = window.getComputedStyle(self);
      return +st.height.replace('px', '');
    },
    set (value) {
      var self = this;
      self.style.height = p(value);
      return self;
    }
  },

  top: {
    get () {
      var self = this,
        st = window.getComputedStyle(self);
      return +st.top.replace('px', '') || self.offsetTop;
    },
    set (value) {
      var self = this;
      self.style.top = p(value);
      return self;
    }
  },

  left: {
    get () {
      var self = this,
        st = window.getComputedStyle(self);
      return +st.left.replace('px', '') || self.offsetLeft;
    },
    set (value) {
      var self = this;
      self.style.left = p(value);
      return self;
    }
  },

  right: {
    get () {
      var self = this,
        st = window.getComputedStyle(self);
      return +st.right.replace('px', '') || 0;
    },
    set (value) {
      var self = this;
      self.style.right = p(value);
      return self;
    }
  },

  bottom: {
    get () {
      var self = this,
        st = window.getComputedStyle(self);
      return +st.bottom.replace('px', '') || 0;
    },
    set (value) {
      var self = this;
      self.style.bottom = p(value);
      return self;
    }
  },

});

function p(val) {
  if (typeof val === 'number') {
    return `${val}px`;
  }
  return `${val}`;
}
