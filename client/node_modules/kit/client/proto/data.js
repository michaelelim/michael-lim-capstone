'use strict';

const state = {
  counter: 0,
  data: {},
};

Object.assign(Element.prototype, {

  ds (name, value) {
    var self = this;
    if (arguments.length === 2) {
      self.dataset[name] = value;
      return self;
    }
    if (arguments.length === 1 && typeof name === 'object') {
      _.each(name, (value, name) => self.ds(name, value));
      return self;
    }
    if (arguments.length === 1) {
      return self.dataset[name];
    }
    let data = {};
    Object.keys(self.dataset).forEach(name => data[name] = self.dataset[name]);
    return data;
  },

});

Object.defineProperty(Element.prototype, 'uid', {

  get () {
    var self = this,
      uid = self.dataset.uid || `uid-${++state.counter}`;
    self.dataset.uid = uid;
    return uid;
  },

});

Object.defineProperty(Element.prototype, 'data', {

  get () {
    var self = this,
      uid = self.uid;
    state.data[uid] = state.data[uid] || {};
    return state.data[uid];
  },

  set (data) {
    var self = this,
      uid = self.uid;
    state.data[uid] = data;
    return self;
  }

});
