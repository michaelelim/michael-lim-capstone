import tags from './tags';

const state = {
  tags: {},
  hidden: document.createElement('div')
};

state.hidden.style.display = 'none';

document.body.appendChild(state.hidden);

Object.assign(document, {

  create (tagName = 'div', className = '', html = '') {
    var elem = document.createElement(tagName),
      classes = elem.parseClassList(className);
    elem.innerHTML = html || '';
    elem.data._classes = classes;
    return elem;
  },

  getTagByName (name) {
    var self = this;
    return state.tags[name];
  },

  registerTagName (name, tagName, isContainer, args) {
    state.tags[name] = {
      isContainer: isContainer,
      tagName: tagName,
      args: args,
    };
    Element.prototype[name] = function (...args) {
      var className = '', attrs = {}, content = '';
      if (typeof args[0] === 'string' && args[0].startsWith('.')) {
        className = args[0];
      }
      if (typeof args[0] === 'string') {
        content = args[0];
      }
      if (typeof args[1] === 'string' && args[1].startsWith('.')) {
        className = args[1];
      }
      if (typeof args[1] === 'string') {
        content = args[1];
      }
      if (!Array.isArray(args[0]) && typeof args[0] === 'object') {
        attrs = args[0];
      }
      return this.create(name, className, content, attrs);
    };
  },

  isContainer (tagName) {
    return !!state.tags[tagName].isContainer;
  },

  registerStandardTags () {
    Object.keys(tags).forEach(tagName => {
      document.registerTagName(tagName, tagName, tags[tagName]);
    });
  },

  getRegisteredTags () {
    return state.tags;
  },

  getHidden () {
    return state.hidden;
  },

  cacheImage (url) {
    var self = this,
      img = document.createElement('img');
    img.style.display = 'none';
    img.src = url;
    document.body.appendChild(img);
    setTimeout(() => {
      img.remove();
    }, 0);
  },

});

document.registerStandardTags();

(document._tags || []).forEach(item => {
  document.registerTagName(item.name, item.tagName, item.isContainer, item.args);
});
