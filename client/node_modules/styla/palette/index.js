'use strict';

const _ = require('lodash');
const palette = require('google-material-color');
const createColor = require('color');

const STEP = 50;

module.exports = {
  getData,
  dumpStylus,
  getShadeRange,
  getLightRange,
  getArray,
  dumpJs,
  dump,
};

function dump() {
  dumpJs();
  dumpStylus();
}

function dumpJs() {
  var sections = getArray();
  fs.writeFileSync(path.resolve(__dirname, './palette.json'), JSON.stringify({
    sections: sections,
  }));
}

function getArray() {
  var data = getData();
  return _.keys(data).map(name => {
    var colors = data[name],
      shades = _.keys(colors).map(shade => {
        return {
          name: name,
          shade: shade,
          color: colors[shade],
        };
      });
    return {
      name: name,
      colors: shades,
    };
  });
}

function dumpStylus() {
  var data = getData(),
    names = _.keys(data).sort(),
    colors = names
      .map(name =>
`  '${name}': {
  ${_.keys(data[name]).sort().map(shade => `    '${shade}': ${data[name][shade]},`).join('\n').slice(2)}
  },
`)
      .join('\n').slice(2),
    code =
`$paletteColors = {
  ${colors}
};

paletteShades = (${getShadeRange().map(val => `'${val}'`).join(' ')});

palette(name, shade)
  return $paletteColors[name][join('', (shade))];

${names.map(name =>
`${name}(shade)
  return palette('${name}', shade);
`).join('\n')}
`;
  fs.writeFileSync(path.resolve(__dirname, '../styles/palette.styl'), code);
}

function getData() {
  var data = {};

  _.each(_.keys(palette.palette), title => {
    var name = _.camelCase(title),
      vals = createColor(palette.get(title, 500)).hsl().object(),
      shades = data[name] = {};
    _.each(getLightRange(), lval => {
      _.each(['', 'a', 'b'], (sval, i) => {
        var color = createColor({
            h: vals.h,
            // s: i * 25 + 12,
            s: {
              // '': vals.s,
              // a: vals.s * 0.3,
              // b: vals.s * 0.5
              '': 20,
              a: 50,
              b: 80
            }[sval],
            // l: i * 25 + 15,
            l: (1000 - lval) / 10,
          }),
          shade = `${lval}${sval}`;
        shades[shade] = color.hex();
      });
    });
  });

  return data;
}

function getShadeRange() {
  var shades = [];
  getLightRange()
    .map(lval => {
      shades = shades.concat([`${lval}`, `${lval}a`, `${lval}b`, `${lval}c`]);
    });
  return shades;
}

function getLightRange() {
  return _
    .range(0, 1000, STEP)
    .filter(val => !!val);
}
