'use strict';

const _ = require('lodash');
const Files = require('./files');
const util = require('util');

module.exports = class GetSet extends Files {

  _set (key, val) {
    var self = this;
    if (arguments.length === 1 && key && typeof key === 'object') {
      _.each(key, (v, n) => self._set(n, v));
      return self;
    }
    return _.set(self, key, val);
  }

  _get (key) {
    var self = this;
    if (!key) return self;
    var val = _.get(self, key);
    return val;
  }

  set (key, val) {
    var self = this;
    if (arguments.length === 1 && key && typeof key === 'object') {
      _.each(key, (v, n) => self.set(n, v));
      return self;
    }
    return _.set(self, key, val);
  }

  get (key) {
    var self = this;
    if (!key) return self;
    return self.child(key);
  }

  has (key) {
    var self = this,
      parent = self.getParent(key);
    return _.get(parent, key) !== undefined;
  }

  delete (name) {
    var self = this,
      context = self.getContext(name),
      last = name.split('.').pop(),
      value = _.get(self, name);
    (context && last && context.hasOwnProperty(last)) ? delete context[last] : '';
    self.emit('deleted', name, value);
    return self;
  }

  update (key, val) {
    var self = this,
      oldValue = self._get(key);
    if (oldValue === val) { return self; }
    self._set(key, val);
    self.emit('changed', key, val, oldValue);
    self.emit('changed:' + key, val, oldValue);
    return self;
  }

}
