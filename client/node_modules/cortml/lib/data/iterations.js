'use strict';

const _ = require('lodash');
const Info = require('./info');
const util = require('../util');

module.exports = class Iterations extends Info {

  eachPrimitive (key, handler) {
    var self = this,
      item = self;
    if (arguments.length === 0) {
      return self;
    }
    if (arguments.length === 1 && key && typeof key === 'function') {
      handler = key;
    }
    if (arguments.length === 2 && key) {
      item = item.get(key);
    }
    _.each(item.flatten(), (v, k) => handler(v, item.getChildKey(k)));
    return self;
  }

  each (handler) {
    var self = this;
    _.each(self, (val, name) => {
      if (name.startsWith('__')) return;
      handler(val, name);
    });
    return self;
  }

  eachObject (handler, o, parent) {
    var self = this,
      obj = o || self;
    _.keys(obj).forEach(key => {
      var val = obj[key],
        name = parent ? `${parent}.${key}` : key;
      if (util.notObject(val)) return;
      handler(val, name);
      self.eachObject(handler, val, name);
    });
    return self;
  }

}
