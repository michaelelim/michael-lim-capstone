'use strict';

class Hash {

  constructor (...args) {
    var self = this;
    self._handlers = {};
    self._data = {};
    self._middleware = {};
    if (typeof self.init === 'function') {
      self.init(...args);
    }
  }

  use (name, handler) {
    if (arguments.length < 2) {
      handler = name;
      name = 'main';
    }
    var self = this,
      mid = self._middleware;
    mid[name] = mid[name] || [];
    mid[name].push(handler);
    return self;
  }

  run (name, d) {
    if (arguments.length < 2) {
      d = name;
      name = 'main';
    }
    var self = this,
      data = d || {},
      mid = self._middleware,
      handlers = (mid[name] || []).slice(0),
      handler, resolve, reject;

    return new Promise((res, rej) => {
      resolve = res;
      reject = rej;
      nextHandler();
    });

    function nextHandler() {
      handler = handlers.shift();
      if (!handler) {
        resolve(data);
        return;
      }
      try {
        handler(data, (d) => {
          data = d || data;
          nextHandler();
        });
      } catch(err) {
        reject(err);
      }

    }
  }

  keys () {
    var self = this;
    return Object.keys(self._data);
  }

  each (handler) {
    var self = this,
      data = self.toJSON();
    _.each(data, (value, name) => {
      handler(value, name);
    });
    return self;
  }

  define (name, prop) {
    var self = this;
    if (name && typeof name === 'object') {
      Object.defineProperties(self, name);
      return self;
    }
    Object.defineProperty(self, name, prop);
    return self;
  }

  set (name, value) {
    var self = this,
      data = self._data;

    if (name && typeof name === 'object') {
      _.each(name, (value, name) => {
        self.set(name, value);
      });
      return self;
    }

    data[name] = value;

    if (!self.hasOwnProperty(name)) {
      self.define(name, {
        get () {
          return data[name];
        },
        set (value) {
          data[name] = value;
          emitEvents(name, value);
          return self;
        }
      });
    }

    emitEvents(name, value);

    return self;

    function emitEvents (name, value) {
      self.emit('set', name, value);
      self.emit('set:' + name, value);
    }

  }

  get (name) {
    var self = this,
      data = self._data;
    return data[name];
  }

  toJSON () {
    var self = this,
      data = {};
    _.each(self._data, (value, name) => {
      if (name[0] === '_' || typeof value === 'function') {
        return;
      }
      data[name] = getJSONValue(value);
    });
    return data;
  }

}

module.exports = Hash;

function getJSONValue(val) {
  if (!val) {
    return val;
  }
  if (typeof val === 'object'
    && typeof val.toJSON === 'function') {
    return val.toJSON();
  }
  if (typeof val === 'function') {
    return val.toString();
  }
  if (Array.isArray(val)) {
    return val.map((value) => {
      return getJSONValue(value);
    });
  }
  return val;
}
