'use strict';

const _ = require('../_');
const fs = require('fs');
const path = require('path');

class Entry extends _.EventEmitter {

  constructor (data, file) { super();
    var self = this;
    _.extend(self, {
      file: file,
      type: null,
      name: null,
      content: null,
      index: null,
    }, data);

    self.data = self.parseContent();
  }

  render () {
    var self = this,
      d = self.data,
      code = {
        args: `#### Arguments\n\n` + ((d.args || {}).items || [])
          .map(item => `- \`${item.name}\`: ${item.type}, ${item.desc};`)
          .join('\n'),
        return: `#### Return\n\n` + ((d.return || {}).items || [])
          .map(item => `- \`${item.name}\`: ${item.type}, ${item.desc};`)
          .join('\n'),
        code: `#### Example

\`\`\`js
${(d.code || {}).content || ''}
\`\`\`
`,
      };
    return `
### ${self.type.trim()} \`${self.name.trim()}\`

${(d.desc || {}).content || ''}

${d.code ? code.code : ''}

${d.args ? code.args : ''}

${d.return ? code.return : ''}

`;
  }

  parseContent () {
    var self = this,
      lines = (self.content || '')
        .split('\n')
        .map(s => s.trim())
        .filter(s => !!s),
      data = {},
      item = null,
      sections = {
        args: 'arg',
        desc: 'text',
        return: 'arg',
        code: 'text',
      },
      sectionsNames = Object.keys(sections);
    _.each(lines, (line, lineIndex) => {
      if (line.endsWith(':') && sectionsNames.includes(line.slice(0, -1))) {
        item ? (data[item.name] = item) : '';
        item = {
          name: line.slice(0, -1),
          lines: [],
        };
        return;
      }
      item ? item.lines.push(line) : '';
    });
    item ? (data[item.name] = item) : '';
    _.each(data, (item, name) => {
      item.content = item.lines.join('\n');
      item.items = item.lines.map(line => self.parseLine(line, sections[name]));
    });
    return data;
  }

  parseLine (l, type = 'text') {
    var self = this,
      line = _.trim(l, '-').trim();
    return self[`${type}TypeParser`].call(self, line);
  }

  textTypeParser (line) {
    var self = this;
    return (line || '').trim();
  }

  argTypeParser (line) {
    var self = this;
    return {
      name: line.split('(').shift().trim(),
      type: (line.split('(').pop() || '').split(')').shift().trim(),
      desc: line.split(':')[1] || '',
    };
  }

}

module.exports = Entry;
