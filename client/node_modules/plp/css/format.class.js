'use strict';

const _ = {
  clone: require('../clone'),
  each: require('../each'),
  dasherize: require('../dasherize'),
  isClass: require('../is-class'),
};

const Formatter = require('./formatter.class');

const state = {

};

class Format {

  constructor (items = []) {
    var self = this;
    self.formatters = items.map(item => new Formatter(item));
  }

  set $$ (i) {
    var self = this,
      item = _.isClass(i) ? new i() : i;
    self.formatters.push(item instanceof Formatter ? item : new Formatter(item));
    return item;
  }

  get $$ () {
    var self = this;
    return _.clone(self.formatters);
  }

  format (name, value) {
    var self = this,
      result = {
        [name]: value,
      };
    self.formatters
      .filter(item => item.test(name, value, result))
      .forEach(item => {
        result = item.format(name, value, result);
      });
    return result;
  }

  test (name, value) {
    var self = this;
    return !!self.formatters.filter(item => item.test(name, value)).length;
  }

  testCss (data) {
    var self = this,
      has = false;
    _.each(data, (value, name) => {
      if (self.test(name, value)) has = true;
    });
    return has;
  }

  formatCss (data) {
    var self = this,
      css = {};
    _.each(data, (value, name) => {
      Object.assign(css, self.format(name, value));
    });
    return css;
  }

  css (d) {
    var self = this,
      data = _.clone(d),
      css = {};
    while (self.testCss(data)) data = self.formatCss(data);
    _.each(data, (value, name) => {
      css[_.dasherize(name)] = value;
    });
    return css;
  }

}

module.exports = Format;
