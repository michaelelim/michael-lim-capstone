'use strict';

const _ = {

};

const state = {
  each: require('../each'),
  flatten: require('../flatten'),
  dasherize: require('../dasherize'),
  camelCase: require('../camelcase'),
  clone: require('../clone'),
};

class CssData {

  constructor (name, value) {
    var self = this;
    self.name = name;
    self.value = value;
    self.data = {};
    self.setProperty(name, value);
  }

  update (newData) {
    var self = this;
    self.data = {};
    return self.set(newData);
  }

  set (newData) {
    var self = this;
    _.each(newData, (val, name) => self.setProperty(name, val));
    return self;
  }

  remove (...names) {
    var self = this,
      data = self.data;
    _.flatten(names)
      .map(name => _.dasherize(name))
      .forEach(name => data.hasOwnProperty(name) ? delete data[name] : '');
    return self;
  }

  toString () {
    var self = this;
    return self.data;
  }

  valueOf () {
    var self = this;
    return self.data;
  }

  setValue (val) {
    var self = this,
      value = _.camelCase(val);
    self.value = value;
    return self.setProperty(self.name, value);
  }

  applyFormatter (item) {
    var self = this,
      result = item._format(self.name, self.value, self);

  }

  setProperty (name, value) {
    var self = this;
    self.data[_.dasherize(name)] = format.formatUnit(_.camelCase(name), value);
    return self;
  }

  getData () {
    var self = this;
    return _.clone(self.data);
  }

  get css () {
    var self = this;
    return self.getData();
  }

}

module.exports = CssData;
