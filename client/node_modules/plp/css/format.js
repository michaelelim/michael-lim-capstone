'use strict';

const Format = require('./format.class');

const _ = {
  unit: require('./unit'),
};

var format = new Format();

format.$$ = {
  names: [
    'border',
      'border-top',
      'border-right',
      'border-bottom',
      'border-left',
  ],
  types: ['number'],
  format (name, val) {
    return {
      [`${name}-width`]: _.unit(val, 'px'),
    };
  },
};

format.$$ = {
  names: [
    'border',
      'border-top',
      'border-right',
      'border-bottom',
      'border-left',
  ],
  types: ['object'],
  format (name, val) {
    var width = _.unit(val.width, 'px') || 'inherit',
      style = val.style || 'solid',
      color = val.color || 'transparent';
    return `${width} ${style} ${color}`;
  },
};

format.$$ = {
  names: [
    'padding',
    'margin',
    'border',
  ],
  types: ['array'],
  format (name, val) {
    var vals = [val[0], val[0], val[0], val[0]];
    if (val.length === 2)
      vals = [val[0], val[1], val[0], val[1]];
    else if (val.length === 3)
      vals = [val[0], val[1], val[2], val[1]];
    else if (val.length === 4)
      vals = [val[0], val[1], val[2], val[3]];
    return {
      [`${name}Top`]: vals[0],
      [`${name}Right`]: vals[1],
      [`${name}Bottom`]: vals[2],
      [`${name}Left`]: vals[3],
    };
  },
};

format.$$ = {
  names: [
    'top', 'right', 'bottom', 'left',
    'width', 'height',
    'padding',
      'padding-top',
      'padding-right',
      'padding-bottom',
      'padding-left',
    'margin',
      'margin-top',
      'margin-right',
      'margin-bottom',
      'margin-left',
    'border-radius',
      'border-top-left-radius',
      'border-top-left-radius',
      'border-top-left-radius',
      'border-top-left-radius',
  ],
  types: ['number'],
  format (name, val) {
    return `${val}px`;
  },
};

module.exports = format;
