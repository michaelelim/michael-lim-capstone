'use strict';

const FileSlice = require('./file-slice.class');

const _ = {
  extend: require('../extend'),
  filesize: require('../filesize'),
};

const state = {

};

class FileItem {

  constructor (native) {
    var self = this;
    _.extend(self, {
      native: native,
      name: native.name,
      size: native.size,
      edited: new Date(native.lastModified),
      type: native.type,
      parts: [],
    });
  }

  toString () {
    var self = this;
    return `«${self.name}» (${self.getHumanizedSize()})`;
  }

  getHumanizedSize () {
    var self = this;
    return _.filesize(self.size);
  }

  split (size) {
    var self = this,
      start = 0,
      end = size,
      parts = [];
    while (start <= self.size) {
      parts.push(self.slice(start, end));
      start = end;
      end += size;
    }
    return parts;
  }

  slice (begin, end) {
    var self = this,
      native = self.native,
      slice = (native.slice || native.webkitSlice || native.mozSlice).bind(native),
      blob = null;
    if (typeof end !== 'number') {
      end = self.size;
    }
    if (typeof begin !== 'number') {
      begin = 0;
    }
    return new FileSlice(slice(begin, end), begin, end);
  }

  toDataUrl () {
    var self = this;
    return self.slice().toDataUrl();
  }
  
  dataUrl () {
    var self = this;
    return self.toDataUrl();
  }

  toBuffer () {
    var self = this;
    return self.slice().toBuffer();
  }
  
  buffer () {
    var self = this;
    return self.toBuffer();
  }

  toBinaryString () {
    var self = this;
    return self.slice().toBinaryString();
  }
  
  binaryString () {
    var self = this;
    return self.toBinaryString();
  }

  toText () {
    var self = this;
    return self.slice().toText();
  }
  
  text () {
    var self = this;
    return self.toText();
  }
}

module.exports = FileItem;
