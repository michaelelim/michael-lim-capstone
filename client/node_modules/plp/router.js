'use strict';

const _ = {
  EventEmitter: require('./event-emitter'),
  each: require('./each'),
  extend: require('./extend'),
  re: require('./reg-from-string'),
};

class Router {

  constructor () {
    var self = this;
    self.routes = [];
    self.url = '/';
    self.started = false;
    self.d = new _.EventEmitter();
    self.setEvents();

    setTimeout(() => {
      // self.start();
    }, 0);
  }

  setEvents () {
    var self = this;
    window.addEventListener('hashchange', () => {
      self.emit(self.getHash());
    });
  }

  setHash (url) {
    var self = this;
    location.hash = url;
    return self;
  }

  getHash () {
    var self = this,
      val = location.hash.slice(1).trim() || '';
    return val;
  }

  go (...args) {
    var self = this;
    return self.emit(...args);
  }

  findRoute (url) {
    var self = this,
      result = null;
    self.routes.forEach(route => {
      if (result || !route.r.test(url)) return;
      result = route;
    });
    return result;
  }

  emit (url) {
    var self = this,
      done = false;
    if (self.url === url) return self;
    self.setHash(url);
    self.url = url;
    self.d.emit('url', url);
    self.routes.forEach(route => {
      // if (done || !route.r.test(url)) return;
      if (!route.r.test(url)) return;
      route.cb(...route.r.vals(url));
      done = route;
    });
    return self;
  }

  on (url, cb) {
    var self = this;
    if (arguments.length === 1 && typeof url === 'object') {
      _.each(url, (cb, url) => {
        self.on(url, cb);
      });
      return self;
    }
    self.routes.push({
      url: url,
      r: _.re(
        url
          .replace(/\:\@/mgi, '..')
          .replace(/\:\$/mgi, '....')
      ),
      cb: cb
    });
    return self;
  }

  start () {
    var self = this;
    if (self.started) {
      // throw new Error(`plp router already started!`);
      return console.warn(`plp router already started!`);
    }
    self.started = true;
    self.emit(self.getHash());
  }

}

function createRouter() {
  var router = new Router();
  return router;
}

module.exports = createRouter;
