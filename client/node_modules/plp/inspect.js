'use strict';

const _ = {
  isClass: require('./is-class'),
  getClassDescription: require('./get-class-description'),
  getFunctionArgs: require('./get-function-args'),
  keys: require('./keys'),
  json: require('./json'),
};

function inspect (val) {
  if (val === undefined)
    return w('undefined', val);
  if (val === null)
    return w('null', val);
  if (typeof val === 'number' && isNaN(val))
    return w('NaN', val);
  if (typeof val === 'number')
    return w('number', val);
  if (typeof val === 'string')
    return w('string', val);
  if (_.isClass(val))
    return w('class', _.getClassDescription(val));
  if (typeof val === 'function')
    return w('function', `${val.name} (${_.getFunctionArgs(val).join(', ')})`);
  if (Array.isArray(val))
    return w('array', `[${val.map(item => `${item}`).join(', ')}]`);
  if (typeof val === 'object')
    // return w(`object ${val.constructor.name}`, `{ ${_.keys(val).join(', ')} }`);
    return w(`object ${val.constructor.name}`, _.json(val));
  return val;

  function w(type, val) {
    return `[ ${type}: ${val} ]`;
  }
}

module.exports = inspect;
