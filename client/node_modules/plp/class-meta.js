'use strict';

const _ = {
  extend: require('./extend'),
  each: require('./each'),
};

function methodsNames(Class, exclude = []) {
  var excludedNames = exclude.concat(['constructor']);
  return Object
    .getOwnPropertyNames(Class.prototype)
    .filter(name => !excludedNames.includes(name));
}

function staticMethodsNames(Class, exclude = []) {
  var excludedNames = exclude.concat([]);
  return Object
    .getOwnPropertyNames(Class)
    .filter(name => typeof Class[name] === 'function')
    .filter(name => !excludedNames.includes(name));
}

function methods(Class, self = null, exclude = []) {
  var data = {};
  methodsNames(Class, exclude)
    .forEach(name => {
      data[name] = Class.prototype[name];
      if (self) data[name] = data[name].bind(self);
    });
  return data;
}

function staticMethods(Class, exclude = []) {
  var data = {};
  staticMethodsNames(Class, exclude)
    .forEach(name => {
      data[name] = Class[name].bind(Class);
    });
  return data;
}

function classMeta(Class) {
  return Class;
}

_.extend(classMeta, {
  methodsNames,
  staticMethodsNames,
  methods,
  staticMethods,
});

module.exports = classMeta;
