'use strict';

const _ = {
  isClass: require('./is-class'),
  isPrototype: require('./is-prototype'),
};

class Proto {

  constructor (...protos) {
    var self = this;
    Object.defineProperty(self, '__protos', {
      enumerable: false,
      configurable: false,
      writable: false,
      value: protos.slice(0),
    });
    Object.defineProperty(self, '__originalPrototype', {
      enumerable: false,
      configurable: false,
      writable: false,
      value: self.constructor.prototype,
    });
    self._update();
  }

  _setPrototype (proto) {
    var self = this;
    Object.setPrototypeOf(self.constructor.prototype, proto);
    return self;
  }

  _update () {
    var self = this,
      items = [{}]
        .concat(self.__protos.slice(0))
        .concat([self.constructor.prototype])
        .map(proto => _.isPrototype(proto) ? Object.create(proto) : proto),
      current;
    console.log(items);
    while (current = items.pop()) {
      let proto = items[items.length - 1];
      // if (proto.constructor !== Object)
      console.log('CURRENT', current, _.isPrototype(current));
      console.log('PROTO', proto, _.isPrototype(proto));
      if (!current || !proto) break;
      Object.setPrototypeOf(current, proto);
    }
  }

  _insert (proto, position = 0) {
    var self = this;
  }

}

function createProto(...protos) {
  var proto = new Proto(...protos);
  return proto;
}

module.exports = createProto;
