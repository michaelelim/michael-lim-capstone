import req from './req';

/**
function animator(elem)

*/

const _ = req.all({
  extend: require('./extend'),
  each: require('./each'),
  EventEmitter: require('./event-emitter'),
  values: require('./values'),
  getElementStyle: require('./get-element-style'),
});

class Animator extends _.EventEmitter {

  constructor (elem) { super();
    var self = this;
    self.reset({
      elem,
    });
  }

  propertyStep (prop) {
    var self = this,
      step = self.speed / 1000;
    if ((prop.index === 1 && prop.value >= prop.finish)
      || (prop.index === -1 && prop.value <= prop.finish)) {
      delete self.props[prop.name];
      self.emit(`done:${prop.name}`, prop.value);
      if (!_.values(self.props).length) self.stop();
      return self;
    }
    prop.value = prop.value + step * prop.index;
    self.setValue(prop.type, prop.name, prop.value);
    return self;
  }

  animate (name, value) {
    var self = this,
      prop = self.getProperty(name, value);
    self.props[name] = prop;
    self.start();
    return self;
  }

  nextStep () {
    var self = this;
    _.each(self.props, prop => self.propertyStep(prop));
    return self;
  }

  start () {
    var self = this;
    if (self.active) return self;
    self.active = true;
    self.interval = setInterval(() => {
      if (!self.active) {
        self.clearInterval();
        self.reset();
        return;
      }
      self.nextStep();
    }, self.delay);
  }

  stop () {
    var self = this;
    self.active = false;
    return self;
  }

  setValue (type, name, val) {
    var self = this;
    requestAnimationFrame(() => {
      if (type === 'style') {
        self.elem.style[name] = `${val}px`;
      } else if (type === 'attr') {
        self.elem.setAttribute(name, val);
      } else if (type === 'prop') {
        self.elem[name] = val;
      }
      self.emit(`update:${name}`, val);
    });
    return self;
  }

  parseValue (val) {
    var self = this;
    if (typeof val === 'string' && val.endsWith('px'))
      return +val.slice(0, -2);
    if (typeof val === 'string' && !isNaN(+val))
      return +val;
    return val;
  }

  getProperty (name, finish = null) {
    var self = this,
      style = self.getStyle(),
      type, start, finish;
    if (style.hasOwnProperty(name)) {
      type = 'style';
      start = self.parseValue(style.getPropertyValue(name));
      finish = self.parseValue(finish);
    } else if (self.elem.hasAttribute(name)) {
      type = 'attr';
      start = self.parseValue(self.elem.getAttribute(name));
      finish = self.parseValue(finish);
    } else if (self.elem) {
      type = 'prop';
      start = self.parseValue(self.elem[name]);
      finish = self.parseValue(finish);
    }
    return {
      type,
      start,
      finish,
      name,
      value: start,
      index: finish > start ? 1 : -1,
    };
  }

  reset (data = {}) {
    var self = this,
      elem = data.elem || self.elem;
    _.extend(self, {
      elem: elem,
      props: {},
      speed: 1000,
      active: false,
      interval: null,
      delay: 5,
    });
    self.clearInterval();
    _.extend(self, data);
    return self;
  }

  clearInterval () {
    var self = this;
    if (!self.interval) return;
    clearInterval(self.interval);
    self.interval = null;
    return self;
  }

  interval (cb, duration = 0) {
    var self = this;
    self.interval = setInterval(cb, duration);
    return self;
  }

  getStyle () {
    var self = this;
    return window.getComputedStyle(self.elem, null);
  }

  // Old =======================================================================


  // animate (props = {}, o = {}) {
  //   var self = this;
  //   return new Promise((resolve, reject) => {
  //     var opts = _.extend({
  //         duration: 500,
  //         step: 5,
  //       }, o);
  //     if (self.active) return;
  //     self.reset({
  //       duration: opts.duration,
  //       step: opts.step,
  //     });
  //     self.initProps(props);
  //     self.startAnimation(() => {
  //       resolve();
  //     });
  //   });
  // }
  //
  // startAnimation (cb) {
  //   var self = this,
  //     props = self.props,
  //     elem = self.elem;
  //   self.active = true;
  //   self.interval(() => {
  //     if (self.stepsHandled >= self.stepsCount) {
  //       self.active = false;
  //       self.clearInterval();
  //       cb ? cb() : '';
  //       return;
  //     }
  //     requestAnimationFrame(() => {
  //       _.each(props, (prop, name) => {
  //         prop.value = prop.value + prop.step;
  //         self.setValue(prop.type, name, prop.value);
  //       });
  //     });
  //     self.stepsHandled++;
  //   }, 5);
  // }
  //
  // initProps (props = {}) {
  //   var self = this,
  //     duration = self.duration;
  //   self.stepsCount = duration / 5;
  //   self.duration = duration;
  //   _.each(props, (val, name) => {
  //     var prop = self.getProperty(name),
  //       finish = self.parseValue(val);
  //     self.props[name] = _.extend(prop, {
  //       value: prop.start,
  //       finish: finish,
  //       step: (finish - prop.start) / self.stepsCount,
  //     });
  //   });
  //   return self;
  // }



}

function animator(...args) {
  return new Animator(...args);
}

function anim(elem, name, target, opts = {}) {
  return new Promise((resolve, reject) => {
    var st = _.getElementStyle(elem),
      delay = opts.delay || 10,
      speed = opts.speed || 1.0,
      items = st.get(name).map(val => value(val, target, speed)),
      interval;

    interval = setInterval(nextStep, delay);

    function nextStep() {
      if (!items.map(item => item.finished).filter(f => !f).length) {
        clearInterval(interval);
        return resolve();
      }
      _.each(items, item => item.step());
      requestAnimationFrame(() => {
        st.set(name, items.map(item => item.val));
      });
    }

    function value(val, target, speed) {
      var dir = target > val ? 1 : -1,
        delta = Math.abs(target - val),
        stepsCount = Math.ceil(delta * speed),
        stepValue = delta / stepsCount;
      return {
        get val () {
          return val;
        },
        step (v) {
          val += stepValue * dir;
        },
        get finished () {
          return dir === 1
            ? (val >= target)
            : (val <= target);
        },
      };
    }
  });
}

_.extend(animator, {
  anim,
});

export default animator;
