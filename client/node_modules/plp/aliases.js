'use strict';

/**
function aliases

desc:
Hello, world!

args:
- data (Object): Plain object with data
- name (String)

code:
import aliases from 'plp/aliases';
aliases(date, 'getTime', 'time', 'times');

return:
- data (Object)
*/

const $plp = {
  each: require('./each'),
  extend: require('./extend'),
  flatten: require('./flatten'),
  type: require('./type'),
  ensureArray: require('./ensure-array'),
};

function setAliases(isEnum = false, data = {}, name = '', ...a) {
  if ($plp.type(name) === 'object' && arguments.length === 3) {
    $plp.each(name, (aliases, name) => {
      setAliases(isEnum, data, $plp.ensureArray(name), aliases);
    });
    return data;
  }
  var aliases = $plp.flatten(a);
  $plp.each(aliases, alias => {
    Object.defineProperty(data, alias, {
      enumerable: isEnum,
      get () {
        return data[name];
      },
      set (val) {
        data[name] = val;
      },
    });
  });
  return data;
}

function aliasesEnum(...args) {
  return setAliases(true, ...args);
}

function aliases(...args) {
  return setAliases(false, ...args);
}

$plp.extend(aliases, {
  enum: aliasesEnum,
});

module.exports = aliases;
