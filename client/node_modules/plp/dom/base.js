import _ from './_';
import isCustom from 'plp/is-custom';
import elementUid from 'plp/element-uid';
import elementStorage from 'plp/element-storage';
import elementPath from 'plp/element-path';
import getElementStyle from 'plp/css/get-element-style';

class BaseWrapper extends _.EventEmitter {

  constructor (val, parent = document) { super();
    var self = this;

    _.extend(self, {
      opts: {
        sel: [],
        not: [],
        is: [],
        index: null,
      },
      _parent: typeof parent === 'string'
        ? document.querySelector(parent)
        : parent,
      _elems: null,
    });

    self._setValue(val);
  }

  toString () {
    var self = this;
    return `<Wrapper(${self.length})>`;
  }

  _setValue (val = {}) {
    var self = this;
    if (typeof val === 'string') {
      self.opts.sel = [val];
    } else if (val instanceof NodeList || Array.isArray(val)) {
      self._elems = Array.from(val);
    } else if (val instanceof HTMLElement) {
      self._elems = [val];
    } else if (typeof val === 'object') {
      _.extend(self.opts, {
        sel: _.ensureArray(val.sel).filter(item => !!item),
        not: _.ensureArray(val.not).filter(item => !!item),
        is: _.ensureArray(val.is).filter(item => !!item),
        index: val.index || null,
      });
    }
  }

  get isCustom () {
    var self = this,
      sel = self.opts.sel[0] || '',
      tagName = sel.split(' ')[0] || '';
    if (tagName.startsWith('.'))
      tagName = null;
    return isCustom(self.elem || tagName);
  }

  get uid () {
    var self = this;
    return elementUid(self.elem);
  }

  storage (name, val) {
    var self = this,
      data = elementStorage(self.elem);
    if (arguments.length === 2) {
      _.set(data, name, val);
      return self;
    }
    if (arguments.length === 1 && typeof name === 'string') {
      return _.get(data, name);
    }
    if (arguments.length === 1 && typeof name === 'object') {
      _.extend(data, name);
      return self;
    }
    return _.clone(data);
  }

  get path () {
    var self = this;
    return elementPath(self.elem);
  }

  get basename() {
    var self = this;
    return elementPath.elementName(self.elem);
  }

  get style () {
    var self = this,
      elem = self.elem,
      data = elementStorage(elem),
      st = data.style || getElementStyle(elem);
    data.style = st;
    return st;
  }

}

export default BaseWrapper;
