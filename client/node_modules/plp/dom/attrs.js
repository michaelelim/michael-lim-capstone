import BaseWrapper from './base';
import _ from './_';

class AttrsWrapper extends BaseWrapper {

  attr (name, val) {
    var self = this;
    if (arguments.length === 0) {
      let elem = self.elem,
        attrs = {};
      _.each(elem.attributes, item => {
        attrs[item.name] = elem.getAttribute(item.name);
      });
      return attrs;
    }
    if (arguments.length === 1 && typeof name === 'string') {
      return self.elem.getAttribute(name);
    }
    if (arguments.length === 1 && typeof name === 'object') {
      _.each(name, (val, name) => {
        self.setAttr(name, val);
      });
      return self;
    }
    return self.setAttr(name, val);
  }

  setAttr (name, val) {
    var self = this;
    self.each(elem => elem.setAttribute(name, val));
  }

  // Content ===================================================================

  html (html) {
    var self = this;
    if (arguments.length === 1) {
      self.each(elem => elem.innerHTML = html);
      return self;
    }
    return self.elem.innerHTML;
  }

  // Classes ===================================================================

  removeClass (...args) {
    var self = this,
      classes = _.parseClassName(...args);
    self.each(elem => {
      _.each(classes, name => elem.classList.remove(name));
    });
    return self;
  }

  toggleClass (...args) {
    var self = this,
      classes = _.parseClassName(...args);
    self.each(elem => {
      _.each(classes, name => elem.classList.toggle(name));
    });
    return self;
  }

  addClass (...args) {
    var self = this,
      classes = _.parseClassName(...args);
    self.each(elem => {
      _.each(classes, name => elem.classList.add(name));
    });
    return self;
  }

}

export default AttrsWrapper;
