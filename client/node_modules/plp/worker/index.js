'use strict';

const _ = {
  toBlobUrl: require('../to-blob-url'),
  jsonp: require('../jsonp'),
  getFunctionBody: require('../get-function-body'),
};
const TYPES = {
  function: 'Function',
  string: 'Source',
};
const WorkerHost = require('./host');
const WorkerInstance = require('./instance');
const methods = {
  createWorkerFromSource,
  createWorkerFromFunction,
};

function worker (scope) {
  if (typeof scope !== 'object') {
    return thread(scope);
  }
  var item = new WorkerInstance(scope);
  return item;
}

function thread (...args) {
  return createWorker(...args);
}

function createWorker (content) {
  var worker = typeof content === 'string'
      && content
        .split('?')[0]
        .endsWith('.js')
      ? createUrlWorker(content)
      : createWorkerObject(content),
    wrapper = wrapWorker(worker);
  return wrapper;
}

function createUrlWorker (url) {
  var worker = new Worker(url);
  return worker;
}

function loadWorkerFromUrl (url) {
  return new Promise((resolve) => {
    _
      .jsonp('load.js', 'readFile', url)
      .then(code => {
        resolve(createWorker(code));
      });
  });
}

function createWorkerObject (content) {
  var contentType = typeof content,
    workerType = TYPES[contentType],
    method = methods[`createWorkerFrom${workerType}`],
    worker = method.call(this, content);
  return worker;
}

function createWorkerFromFunction (fn) {
  var body = _.getFunctionBody(fn),
    worker = createWorkerFromSource(body);
  return worker;
}

function createWorkerFromSource (source) {
  var code2 = `
      self.addEventListener('message', ev => {
        var req = ev.data,
          res = {
            send (...args) {
              return self.postMessage(...args);
            },
          };
        ${source}
      }, false);
    `,
    code = `${source}`,
    url = _.toBlobUrl(code),
    worker = new Worker(url);
  return worker;
}

module.exports = worker;
