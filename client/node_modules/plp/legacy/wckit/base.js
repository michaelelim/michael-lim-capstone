import set from 'util/objects/set';
import attr from 'util/domtools/attr';
import dataset from 'util/domtools/dataset';
import delegate from 'util/domtools/delegate';
import interpolate from 'util/interpolate';

class WCBase extends HTMLElement {

  attr (...args) {
    var self = this;
    return attr(self, ...args);
  }

  ds (...args) {
    var self = this;
    return dataset(self, ...args);
  }

  one (sel) {
    var self = this;
    return self.querySelector(sel);
  }

  insertToSel (sel, tagName, attrs) {
    var self = this;
    self.sel[sel].innerHTML = WCBase.kit.create(tagName, attrs);
  }

  append (tagName, attrs) {
    var self = this,
      elem = WCBase.kit.createElement(tagName, attrs);
    self.appendChild(elem);
  }

  repeatToSel (sel, tagName, items, attrs) {
    var self = this;
    self.sel[sel].innerHTML = WCBase.kit.repeat(tagName, items, attrs);
  }

  repeat (tagName, items, attrs) {
    var self = this;
    self.innerHTML = WCBase.kit.repeat(tagName, items, attrs);
  }

  repeatToSel (sel, tagName, items, attrs) {
    var self = this;
    self.sel[sel].innerHTML = WCBase.kit.repeat(tagName, items, attrs)
  }

  attributeChangedCallback (name, oldVal, newVal) {
    var self = this,
      handlerName = `on${name[0].toUpperCase()}${name.slice(1)}Attr`;

    if (typeof self[handlerName] === 'function') {
      self[handlerName](newVal, oldVal);
    }

    self.attrChanged(name, newVal, oldVal);
  }

  createdCallback () {
    var self = this;
    self.meta = self.constructor.metaData;

    if (typeof self.meta.template === 'string') {
      self.setTemplate();
    }

    if (self.meta.className) {
      let className = self.meta.className,
        classes = Array.isArray(className) ? className : className.split(' ');
      classes.forEach(className => self.classList.add(className));
    }

    if (self.meta.events) {
      Object.keys(self.meta.events).forEach(sel => {
        var events = self.meta.events[sel];
        if (typeof events === 'function') {
          return self.addEventListener(sel, events, false);
        }
        Object.keys(events).forEach(event => {
          delegate(self, sel, event, events[event].bind(self));
        });
      });
    }

    self.meta.methods.forEach(methodName => {
      if (methodName.indexOf('->') === -1) return;
      var parts = methodName.split('->').map(part => part.trim()),
        selector = parts[0],
        event = parts[1],
        method = self[methodName].bind(self);
      if (parts[0] === '') {
        return self.addEventListener(parts[1], method, false);
      }
      delegate(self, selector, event, method);
    });

    self.created();
  }

  setTemplate (source) {
    var self = this,
      elems = {},
      context = Object.assign({
        kit: WCBase.kit,
        self: self
      }, self.meta.context || {}),
      source = interpolate(self.meta.template, context),
      selNames = [];

    self.innerHTML = source;
    source.replace(/sel\=\"([^\"]+)\"/mgi, (txt, sel) => {
      var elem = self.querySelector(`[sel="${sel}"]`);
      set(elems, sel, elem);
      self[`$${sel}`] = elem;
    });
    self.sel = elems;
  }

  attachedCallback () {
    var self = this;

    self.attached();
  }

  created () {}
  attached () {}
  attrChanged () {}

}

export default WCBase;
