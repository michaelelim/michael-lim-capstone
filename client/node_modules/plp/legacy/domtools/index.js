class Dom {

  constructor () {
    var self = this;
  }

  elem (selector) {
    var self = this;
    return selector instanceof Element ? selector : document.querySelector(selector);
  }

  each (selector, handler) {
    var self = this;
    if (selector instanceof Element) {
      return handler(selector);
    }
    if (Array.isArray(selector)) {
      return selector.forEach(sel => self.each(sel, handler));
    }
    if (typeof selector === 'string') {
      return document.querySelectorAll(selector).forEach(elem => handler(elem));
    }
  }

  getParents (elem, includeSelf) {
    var self = this,
      parents = includeSelf ? [elem] : [],
      parent = elem.parentNode;
    while (parent && parent !== document) {
      parents.push(parent);
      parent = parent.parentNode;
    }
    return parents
      .filter(parent => parent instanceof Element);
  }

  findParent (elem, selector, includeSelf) {
    var self = this,
      parents = self.getParents(elem, includeSelf);
    for (let parent of parents) {
      if (parent.matches(selector)) {
        return parent;
      }
    }
    return null;
  }

  hasParent (elem, selector) {
    var self = this;
    return !!self.findParent(elem, selector);
  }

}

export default new Dom();
