import FileSlice from './slice';
import filesize from 'util/format/filesize';

class File {

  constructor (native) {
    var self = this;

    self.native = native;
    self.name = native.name;
    self.size = native.size;
    self.edited = new Date(native.lastModified);
    self.type = native.type;
    self.parts = [];
  }

  toString () {
    var self = this;
    return `«${self.name}» (${self.getHumanizedSize()})`;
  }

  getHumanizedSize () {
    var self = this;
    return filesize(self.size);
  }

  split (size) {
    var self = this,
      start = 0,
      end = size,
      parts = [];
    while (start <= self.size) {
      parts.push(self.slice(start, end));
      start = end;
      end += size;
    }
    return parts;
  }

  slice (begin, end) {
    var self = this,
      native = self.native,
      slice = (native.slice || native.webkitSlice || native.mozSlice).bind(native),
      blob = null;
    if (typeof end !== 'number') {
      end = self.size;
    }
    if (typeof begin !== 'number') {
      begin = 0;
    }
    return new FileSlice(slice(begin, end), begin, end);
  }

  dataUrl () {
    var self = this;
    return self.slice().dataUrl();
  }

  buffer () {
    var self = this;
    return self.slice().buffer();
  }

  binaryString () {
    var self = this;
    return self.slice().binaryString();
  }

  text () {
    var self = this;
    return self.slice().text();
  }
}

module.exports = File;
