import dom from 'util/domtools';
import events from 'util/events';

import File from './file';

class DragDrop {

  constructor () {
    var self = this;
    self.counter = 0;
    self.images = {};
    self.data = {};
  }

  setData (data) {
    var self = this,
      uid = `dnd-${++self.counter}`;
    self.data[uid] = data;
    return uid;
  }

  getData (uid) {
    var self = this,
      data = self.data[uid];
    if (!self.data.hasOwnProperty(uid)) {
      return {};
    }
    delete self.data[uid];
    return data;
  }

  // Draggable =================================================================

  draggable (e, options) {
    var self = this;
    dom.each(e, elem => self.setElementDraggable(elem, options || {}));
  }

  setElementDraggable (elem, options) {
    var self = this;
    elem.draggable = true;
    elem.classList.add('filekit-draggable');
    self.setDraggableEvents(elem, options);
    options.icon ? self.getImage(options.icon.url) : '';
    return elem;
  }

  setDragIcon (ev, icon) {
    var self = this,
      img = self.getImage(icon.url);
    ev.dataTransfer.setDragImage(img, (icon.left || -10), (icon.top || -10));
  }

  setDraggableEvents (elem, options) {
    var self = this;
    events.bindAll(elem, {

      dragstart (ev) {
        ev.dataTransfer.clearData();
        self.setEffects(ev);
        elem.classList.add('filekit-dragging');
        if (options.icon) {
          self.setDragIcon(ev, options.icon);
        }
        if (options.onStart) {
          options.onStart(ev, elem);
        }
        if (options.data) {
          let data;
          if (typeof options.data === 'function') {
            data = options.data(ev, elem);
          } else {
            data = options.data;
          }
          let uid = self.setData(data);
          ev.dataTransfer.setData('text/plain', uid);
        }
      },

      drag (ev) {
        self.setEffects(ev);
        if (options.onMove) {
          options.onMove(ev, elem);
        }
      },

      dragend (ev) {
        self.setEffects(ev);
        elem.classList.remove('filekit-dragging');
        if (options.onEnd) {
          options.onEnd(ev, elem);
        }
      },

    });
  }

  getImage (url) {
    var self = this;
    if (self.images[url]) {
      return self.images[url];
    }
    let img = document.createElement('img');
    img.classList.add('filekit-drag-icon');
    img.src = url;
    self.images[url] = img;
    return img;
  }

  // Dropzone ==================================================================

  dropzone (e, options) {
    var self = this;
    dom.each(e, elem => self.setElementDropzone(elem, options || {}));
  }

  setElementDropzone (elem, options) {
    var self = this;
    elem.classList.add('filekit-dropzone');
    events.bindAll(elem, {

      dragenter (ev) {
        self.setEffects(ev);
        elem.classList.add('filekit-dragover');
        if (options.onEnter) {
          options.onEnter(ev, elem);
        }
      },

      dragover (ev) {
        self.setEffects(ev);
        ev.preventDefault();
        if (options.icon) {
          self.setDragIcon(ev, options.icon);
        }
        if (options.onOver) {
          options.onOver(ev, elem);
        }
      },

      dragleave (ev) {
        self.setEffects(ev);
        elem.classList.remove('filekit-dragover');
        if (options.onLeave) {
          options.onLeave(ev, elem);
        }
      },

      drop (ev) {
        self.setEffects(ev);
        ev.preventDefault();
        ev.stopPropagation();
        elem.classList.remove('filekit-dragover');
        let uid = ev.dataTransfer.getData('text/plain');
        let data = self.getData(uid) || {};
        data.files = [];
        if (ev.dataTransfer.files.length) {
          data.files = Array
            .from(ev.dataTransfer.files)
            .map(native => new File(native));
        }
        if (options.onDrop) {
          options.onDrop(ev, data, elem);
        }
      },

    });
  }

  setEffects (ev) {
    var self = this;
    ev.dataTransfer.dropEffect = 'move';
    ev.dataTransfer.effectAllowed = 'move';
  }

}

module.exports = new DragDrop();
